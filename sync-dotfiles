#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use FindBin qw($Bin);
# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use File::Path qw(rmtree);
use IO::Handle;
use File::Spec::Functions qw(catfile);



### sub ###

sub usage () {
    die <<EOF;
    Usage: $0 [[-u|--username <user>] [-c|--commit] [-p|--push] [-x|--extract] [--gc]]
EOF
}

sub puts {
    print @_, "\n";
}

sub install {
    # install $src to $dest as $user.
    my ($src, $dest, $user) = @_;

    unless (-e $src) {
        warn "$src:$!\n";
        return;
    }
    rmtree($dest);

    puts("$src -> $dest");
    system('cp', '-RL', $src, $dest);

    if ($^O eq 'cygwin') {
        system('chown', '-R', $user, $dest);
    } else {
        system('chown', '-R', "$user:$user", $dest);
    }
}

sub ask {
    my ($msg) = @_;
    STDERR->print("$msg [y/n]:");
    chomp(my $ans = <STDIN>);
    exit unless $ans =~ /^y(es)?$/i;
}



### main ###

# chdir parent directory of this script
chdir $Bin or die "$Bin:$!";


my @files = qw(
    bin
    .vim
    .vimrc
    .gvimrc
    .vimperator
    .vimperatorrc
    .bash_profile
    .bashrc
    .screenrc
    .inputrc
    .zshrc
    .zshenv
    .zsh
    .skel
    .module-starter
    .emacs
    .emacs.d
);
my @info_files = qw(
    .vim/backup
    .vim/.vimbackup_deleted
    .vim/chalice/cache
    .vim/chalice/*.bmk
    .vimperator/info
);

my $username;
my $auto_commit;
my $auto_push;
my $extract;
my $auto_gc;
my $github_user = qx(git config github.user);

if (defined $ENV{USER}) {
    $username = $ENV{USER};
} else {
    die "env 'USER' is not set.\n";
}

my $help;
GetOptions(
    h => \$help,
    help => \$help,
    'u=s' => \$username,
    'username=s' => \$username,
    c => \$auto_commit,
    commit => \$auto_commit,
    p => \$auto_push,
    push => \$auto_push,
    x => \$extract,
    extract => \$extract,
    gc => \$auto_gc,
) or usage;
usage if $help;


if (! $extract && ! defined $github_user) {
    warn "Can't determine GITHUB_USER('git config github.user' is empty).\n";
}

my $home;
if ($username eq 'root') {
    $home = "/root";
} else {
    $home = "/home/$username";
    unless (-d $home) {
        die "$home:$!"
    }
}

if ($extract) {
    ask("may I replace the dotfiles in '$home'?");
}

for my $file (@files) {
    my ($src, $dest);

    if ($extract) {
        if ($^O eq 'cygwin' && $file eq '.vimperator') {
            $src  = $file;
            $dest = catfile($home, 'vimperator');
        } else {
            $src  = $file;
            $dest = catfile($home, $file);
        }

        install($src, $dest, $username);

    } else {
        if ($^O eq 'cygwin' && $file eq '.vimperator') {
            $src  = catfile($home, 'vimperator');
            $dest = $file;
        } else {
            $src  = catfile($home, $file);
            $dest = $file;
        }

        install($src, $dest, $username);
    }
}

# delete info files.
unless ($extract) {
    # paths are expanded by 'glob'.
    for (map { glob } @info_files) {
        rmtree($_);
    }
}

# update trees and commit all.
if ($auto_commit) {
    my $output = qx(git diff -- .vimrc);
    if (length $output) {
        # もし.vimrcが変更されていたら
        system(qw(vim -c RcbVimrc -c quit));
        sleep 1;
    }

    system(qw(git rm -fr --cached .));
    system(qw(git add .));
    system(qw(git commit));
}

# git gc
if ($auto_gc) {
    system(qw(git gc));
}

# git push origin master
if ($auto_push) {
    system(qw(git push origin master));
}
