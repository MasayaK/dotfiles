#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use FindBin ();
use File::Path qw(rmtree);
use IO::Handle;
use File::Spec::Functions qw(catfile);
use File::Temp ();

use lib "$FindBin::Bin/lib";
use Dotfiles::Util;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);

my @VIM = qw(vim);
my $VIM_RTP_SCRIPT = './write-runtimepath.vim';



### sub ###

sub usage () {
    die <<EOF;
    Usage: $0 [OPTIONS]

OPTIONS:
    -h, --help                  show this help.
    -u, --username <user>       specify username.
EOF
}

sub slurp_chomp {
    my ($path) = @_;

    open my $FH, '<', $path or die $!;
    my @lines = <$FH>;
    close $FH;

    map { chomp; $_ } @lines;
}

# TODO: Make another shellscript for this feature. (gather-rtp-files ?)
sub get_git_files_from_runtimepath {
    my $tempname = do {
        my $fh = File::Temp->new(UNLINK => 0) or die $!;
        $fh->filename;
    };
    system(@VIM, '-S', $VIM_RTP_SCRIPT, $tempname);

    my @ret;
    for my $rtp (slurp_chomp $tempname) {
        $rtp = readlink $rtp while -l $rtp;

        my $repo = eval { Git->repository($rtp) };
        next if $@;

        push @ret, map {
            # [fullpath, relpath]
            [catfile($repo->wc_path, $_), $_]
        } $repo->command('ls-files')
            or warn "Empty repository?: $!"
    }
    @ret;
}



### main ###

# chdir parent directory of this script
chdir $FindBin::Bin or die "$FindBin::Bin:$!";

my $home;
my $username;
my $get_git_files_from_runtimepath;
my $config_file = 'files.yaml';

my $needhelp;
GetOptions(
    'h|help'
        => \$needhelp,
    'u|username=s'
        => \$username,
    'g|get-git-files'
        => \$get_git_files_from_runtimepath,
    'c|config-file=s'
        => \$config_file,
) or usage;
usage if $needhelp;


if (defined $username) {
    $home = get_home_from_user $username;
}
else {
    ($username, $home) = determine_user_and_home;
}

my $c = load_config($config_file);

for my $file (@{$c->{files}}) {
    my ($src, $dest);

    if (is_mswin() && exists $c->{mswin_files}{$file}) {
        $src  = catfile($home, $c->{mswin_files}{$file});
        $dest = $file;
    } else {
        $src  = catfile($home, $file);
        $dest = $file;
    }

    install($src, $dest, $username);
}

for my $f (@{$c->{removed_files}}) {
    if (-e $f) {
        rmtree($f) or warn "cannot remove $_: $!";
    }
}


# -g, --get-git-files: Get git cached files using by git-ls-files.
if ($get_git_files_from_runtimepath) {
    require Git;
    my @files = get_git_files_from_runtimepath();
    for my $f (@files) {
        my ($fullpath, $relpath) = @$f;
        install($fullpath, $relpath, $username);
    }
}
