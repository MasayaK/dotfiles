let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(vimshell_clear) :call vimshell#mappings#clear()
inoremap <silent> <Plug>(vimshell_delete_line) :call vimshell#mappings#delete_line()
inoremap <silent> <Plug>(vimshell_move_head) :call vimshell#mappings#move_head()
inoremap <silent> <Plug>(vimshell_run_help) :call vimshell#mappings#run_help()
inoremap <silent> <Plug>(vimshell_insert_last_word) :call vimshell#mappings#insert_last_word()
inoremap <silent> <Plug>(vimshell_push_current_line) :call vimshell#mappings#push_current_line()
inoremap <expr> <Plug>(vimshell_command_complete) pumvisible() ? "\" : vimshell#parser#check_wildcard() ?  vimshell#mappings#expand_wildcard() : vimshell#complete#command_complete#complete()
inoremap <expr> <Plug>(vimshell_history_complete_insert) vimshell#complete#history_complete#insert()
inoremap <expr> <Plug>(vimshell_history_complete_whole) vimshell#complete#history_complete#whole()
inoremap <SNR>12_success:jg o
inoremap <SNR>12_success:gj o
inoremap <Plug>(arpeggio-default:j) j
inoremap <SNR>12_success:kg O
inoremap <SNR>12_success:gk O
inoremap <Plug>(arpeggio-default:k) k
inoremap <Plug>(arpeggio-default:g) g
cnoremap <SNR>12_success:{# „Äî„Äï<Left>
cnoremap <SNR>12_success:#{ „Äî„Äï<Left>
inoremap <SNR>12_success:{# „Äî„Äï<Left>
inoremap <SNR>12_success:#{ „Äî„Äï<Left>
cnoremap <SNR>12_success:<# „Äê„Äë<Left>
cnoremap <SNR>12_success:#< „Äê„Äë<Left>
inoremap <SNR>12_success:<# „Äê„Äë<Left>
inoremap <SNR>12_success:#< „Äê„Äë<Left>
cnoremap <SNR>12_success:[3 „Äé„Äè<Left>
cnoremap <SNR>12_success:3[ „Äé„Äè<Left>
cnoremap <Plug>(arpeggio-default:3) 3
inoremap <SNR>12_success:[3 „Äé„Äè<Left>
inoremap <SNR>12_success:3[ „Äé„Äè<Left>
inoremap <Plug>(arpeggio-default:3) 3
cnoremap <SNR>12_success:(# „Äå„Äç<Left>
cnoremap <SNR>12_success:#( „Äå„Äç<Left>
cnoremap <Plug>(arpeggio-default:#) #
inoremap <SNR>12_success:(# „Äå„Äç<Left>
inoremap <SNR>12_success:#( „Äå„Äç<Left>
inoremap <Plug>(arpeggio-default:#) #
cnoremap <SNR>12_success:}$ \{\}<Left><Left>
cnoremap <SNR>12_success:$} \{\}<Left><Left>
cnoremap <Plug>(arpeggio-default:}) }
inoremap <SNR>12_success:}$ \{\}<Left><Left>
inoremap <SNR>12_success:$} \{\}<Left><Left>
inoremap <Plug>(arpeggio-default:}) }
cnoremap <SNR>12_success:>$ \<\><Left><Left>
cnoremap <SNR>12_success:$> \<\><Left><Left>
cnoremap <Plug>(arpeggio-default:>) >
inoremap <SNR>12_success:>$ \<\><Left><Left>
inoremap <SNR>12_success:$> \<\><Left><Left>
inoremap <Plug>(arpeggio-default:>) >
cnoremap <SNR>12_success:]4 \[\]<Left><Left>
cnoremap <SNR>12_success:4] \[\]<Left><Left>
cnoremap <Plug>(arpeggio-default:]) ]
inoremap <SNR>12_success:]4 \[\]<Left><Left>
inoremap <SNR>12_success:4] \[\]<Left><Left>
inoremap <Plug>(arpeggio-default:]) ]
cnoremap <SNR>12_success:)$ \(\)<Left><Left>
cnoremap <SNR>12_success:$) \(\)<Left><Left>
cnoremap <Plug>(arpeggio-default:)) )
inoremap <SNR>12_success:)$ \(\)<Left><Left>
inoremap <SNR>12_success:$) \(\)<Left><Left>
inoremap <Plug>(arpeggio-default:)) )
cnoremap <SNR>12_success:{$ {}<Left>
cnoremap <SNR>12_success:${ {}<Left>
cnoremap <Plug>(arpeggio-default:{) {
inoremap <SNR>12_success:{$ {}<Left>
inoremap <SNR>12_success:${ {}<Left>
inoremap <Plug>(arpeggio-default:{) {
cnoremap <SNR>12_success:<$ <><Left>
cnoremap <SNR>12_success:$< <><Left>
cnoremap <Plug>(arpeggio-default:<) <
inoremap <SNR>12_success:<$ <><Left>
inoremap <SNR>12_success:$< <><Left>
inoremap <Plug>(arpeggio-default:<) <
cnoremap <SNR>12_success:[4 []<Left>
cnoremap <SNR>12_success:4[ []<Left>
cnoremap <Plug>(arpeggio-default:[) [
cnoremap <Plug>(arpeggio-default:4) 4
inoremap <SNR>12_success:[4 []<Left>
inoremap <SNR>12_success:4[ []<Left>
inoremap <Plug>(arpeggio-default:[) [
inoremap <Plug>(arpeggio-default:4) 4
cnoremap <SNR>12_success:($ ()<Left>
cnoremap <SNR>12_success:$( ()<Left>
cnoremap <Plug>(arpeggio-default:() (
cnoremap <Plug>(arpeggio-default:$) $
inoremap <SNR>12_success:($ ()<Left>
inoremap <SNR>12_success:$( ()<Left>
inoremap <Plug>(arpeggio-default:() (
inoremap <Plug>(arpeggio-default:$) $
nnoremap <silent>  :MRU
nnoremap <silent>  gt
nnoremap <silent>  gT
nnoremap  q :q
nnoremap  w :w
nnoremap <silent>  = mqgg=G`qzz
noremap <silent>     
noremap <silent>  k 
noremap <silent>  j 
vmap <silent> ;vR <Plug>EgMapReplaceSelection_R
nmap <silent> ;vR <Plug>EgMapReplaceCurrentWord_R
omap <silent> ;vR <Plug>EgMapReplaceCurrentWord_R
vmap <silent> ;vr <Plug>EgMapReplaceSelection_r
nmap <silent> ;vr <Plug>EgMapReplaceCurrentWord_r
omap <silent> ;vr <Plug>EgMapReplaceCurrentWord_r
vmap <silent> ;vA <Plug>EgMapGrepSelection_A
nmap <silent> ;vA <Plug>EgMapGrepCurrentWord_A
omap <silent> ;vA <Plug>EgMapGrepCurrentWord_A
vmap <silent> ;va <Plug>EgMapGrepSelection_a
nmap <silent> ;va <Plug>EgMapGrepCurrentWord_a
omap <silent> ;va <Plug>EgMapGrepCurrentWord_a
vmap <silent> ;vV <Plug>EgMapGrepSelection_V
nmap <silent> ;vV <Plug>EgMapGrepCurrentWord_V
omap <silent> ;vV <Plug>EgMapGrepCurrentWord_V
vmap <silent> ;vv <Plug>EgMapGrepSelection_v
nmap <silent> ;vv <Plug>EgMapGrepCurrentWord_v
omap <silent> ;vv <Plug>EgMapGrepCurrentWord_v
map <silent> ;vo <Plug>EgMapGrepOptions
map ;tt <Plug>AM_tt
map ;tsq <Plug>AM_tsq
map ;tsp <Plug>AM_tsp
map ;tml <Plug>AM_tml
map ;tab <Plug>AM_tab
map ;m= <Plug>AM_m=
map ;t@ <Plug>AM_t@
map ;t~ <Plug>AM_t~
map ;t? <Plug>AM_t?
map ;w= <Plug>AM_w=
map ;ts= <Plug>AM_ts=
map ;ts< <Plug>AM_ts<
map ;ts; <Plug>AM_ts;
map ;ts: <Plug>AM_ts:
map ;ts, <Plug>AM_ts,
map ;t= <Plug>AM_t=
map ;t< <Plug>AM_t<
map ;t; <Plug>AM_t;
map ;t: <Plug>AM_t:
map ;t, <Plug>AM_t,
map ;t# <Plug>AM_t#
map ;t| <Plug>AM_t|
map ;T~ <Plug>AM_T~
map ;Tsp <Plug>AM_Tsp
map ;Tab <Plug>AM_Tab
map ;T@ <Plug>AM_T@
map ;T? <Plug>AM_T?
map ;T= <Plug>AM_T=
map ;T< <Plug>AM_T<
map ;T; <Plug>AM_T;
map ;T: <Plug>AM_T:
map ;Ts, <Plug>AM_Ts,
map ;T, <Plug>AM_T,o
map ;T# <Plug>AM_T#
map ;T| <Plug>AM_T|
map ;Htd <Plug>AM_Htd
map ;anum <Plug>AM_aunum
map ;aunum <Plug>AM_aenum
map ;afnc <Plug>AM_afnc
map ;adef <Plug>AM_adef
map ;adec <Plug>AM_adec
map ;ascom <Plug>AM_ascom
map ;aocom <Plug>AM_aocom
map ;adcom <Plug>AM_adcom
map ;acom <Plug>AM_acom
map ;abox <Plug>AM_abox
map ;a( <Plug>AM_a(
map ;a= <Plug>AM_a=
map ;a< <Plug>AM_a<
map ;a, <Plug>AM_a,
map ;a? <Plug>AM_a?
map ;R ;r$
map ;r <Plug>(operator-replace)
nnoremap <silent> ;fh :FufMruFile
nnoremap <silent> ;ff :FufFile
nnoremap <silent> ;fd :FufDir
nnoremap <silent> ;cd :CdCurrent
nnoremap <silent> ;; ;
noremap ;d "_d
noremap ;Y "*y
noremap ;y "+y
noremap <silent> H w
noremap <silent> L b
nnoremap <silent> N Nzz
xmap S <Plug>VSurround
nnoremap ZZ <Nop>
vmap [% [%m'gv``
noremap <silent> [k :call search('^\S', 'Wsb')
nnoremap <silent> \\ \
vmap ]% ]%m'gv``
noremap <silent> ]k :call search('^\S', 'Ws')
omap ay <Plug>(textobj-syntax-a)
vmap ay <Plug>(textobj-syntax-a)
omap ajY <Plug>(textobj-jabraces-double-yama-kakko-a)
vmap ajY <Plug>(textobj-jabraces-double-yama-kakko-a)
omap ajk <Plug>(textobj-jabraces-kakko-a)
vmap ajk <Plug>(textobj-jabraces-kakko-a)
omap ajK <Plug>(textobj-jabraces-double-kakko-a)
vmap ajK <Plug>(textobj-jabraces-double-kakko-a)
omap aj] <Plug>(textobj-jabraces-brackets-a)
vmap aj] <Plug>(textobj-jabraces-brackets-a)
omap aj[ <Plug>(textobj-jabraces-brackets-a)
vmap aj[ <Plug>(textobj-jabraces-brackets-a)
omap ajr <Plug>(textobj-jabraces-brackets-a)
vmap ajr <Plug>(textobj-jabraces-brackets-a)
omap aj> <Plug>(textobj-jabraces-angles-a)
vmap aj> <Plug>(textobj-jabraces-angles-a)
omap aj< <Plug>(textobj-jabraces-angles-a)
vmap aj< <Plug>(textobj-jabraces-angles-a)
omap aja <Plug>(textobj-jabraces-angles-a)
vmap aja <Plug>(textobj-jabraces-angles-a)
omap ajA <Plug>(textobj-jabraces-double-angles-a)
vmap ajA <Plug>(textobj-jabraces-double-angles-a)
omap ajt <Plug>(textobj-jabraces-kikkou-kakko-a)
vmap ajt <Plug>(textobj-jabraces-kikkou-kakko-a)
omap ajs <Plug>(textobj-jabraces-sumi-kakko-a)
vmap ajs <Plug>(textobj-jabraces-sumi-kakko-a)
omap ajy <Plug>(textobj-jabraces-yama-kakko-a)
vmap ajy <Plug>(textobj-jabraces-yama-kakko-a)
omap aj) <Plug>(textobj-jabraces-parens-a)
vmap aj) <Plug>(textobj-jabraces-parens-a)
omap aj( <Plug>(textobj-jabraces-parens-a)
vmap aj( <Plug>(textobj-jabraces-parens-a)
omap ajb <Plug>(textobj-jabraces-parens-a)
vmap ajb <Plug>(textobj-jabraces-parens-a)
omap aj} <Plug>(textobj-jabraces-braces-a)
vmap aj} <Plug>(textobj-jabraces-braces-a)
omap aj{ <Plug>(textobj-jabraces-braces-a)
vmap aj{ <Plug>(textobj-jabraces-braces-a)
omap ajB <Plug>(textobj-jabraces-braces-a)
vmap ajB <Plug>(textobj-jabraces-braces-a)
omap ai <Plug>(textobj-indent-a)
vmap ai <Plug>(textobj-indent-a)
omap aI <Plug>(textobj-indent-same-a)
vmap aI <Plug>(textobj-indent-same-a)
omap af <Plug>(textobj-function-a)
vmap af <Plug>(textobj-function-a)
omap az <Plug>(textobj-fold-a)
vmap az <Plug>(textobj-fold-a)
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> g	 :Gtags -f %
nmap gO ;cO
nmap go ;co
nnoremap gh :set hlsearch!
nnoremap <silent> gc :cclose
nnoremap <silent> gm :make
nnoremap <silent> g0 :tabfirst
nnoremap <silent> g$ :tablast
noremap <silent> gk k
noremap <silent> gj j
omap iy <Plug>(textobj-syntax-i)
vmap iy <Plug>(textobj-syntax-i)
omap ijY <Plug>(textobj-jabraces-double-yama-kakko-i)
vmap ijY <Plug>(textobj-jabraces-double-yama-kakko-i)
omap ijk <Plug>(textobj-jabraces-kakko-i)
vmap ijk <Plug>(textobj-jabraces-kakko-i)
omap ijK <Plug>(textobj-jabraces-double-kakko-i)
vmap ijK <Plug>(textobj-jabraces-double-kakko-i)
omap ij] <Plug>(textobj-jabraces-brackets-i)
vmap ij] <Plug>(textobj-jabraces-brackets-i)
omap ij[ <Plug>(textobj-jabraces-brackets-i)
vmap ij[ <Plug>(textobj-jabraces-brackets-i)
omap ijr <Plug>(textobj-jabraces-brackets-i)
vmap ijr <Plug>(textobj-jabraces-brackets-i)
omap ij> <Plug>(textobj-jabraces-angles-i)
vmap ij> <Plug>(textobj-jabraces-angles-i)
omap ij< <Plug>(textobj-jabraces-angles-i)
vmap ij< <Plug>(textobj-jabraces-angles-i)
omap ija <Plug>(textobj-jabraces-angles-i)
vmap ija <Plug>(textobj-jabraces-angles-i)
omap ijA <Plug>(textobj-jabraces-double-angles-i)
vmap ijA <Plug>(textobj-jabraces-double-angles-i)
omap ijt <Plug>(textobj-jabraces-kikkou-kakko-i)
vmap ijt <Plug>(textobj-jabraces-kikkou-kakko-i)
omap ijs <Plug>(textobj-jabraces-sumi-kakko-i)
vmap ijs <Plug>(textobj-jabraces-sumi-kakko-i)
omap ijy <Plug>(textobj-jabraces-yama-kakko-i)
vmap ijy <Plug>(textobj-jabraces-yama-kakko-i)
omap ij) <Plug>(textobj-jabraces-parens-i)
vmap ij) <Plug>(textobj-jabraces-parens-i)
omap ij( <Plug>(textobj-jabraces-parens-i)
vmap ij( <Plug>(textobj-jabraces-parens-i)
omap ijb <Plug>(textobj-jabraces-parens-i)
vmap ijb <Plug>(textobj-jabraces-parens-i)
omap ij} <Plug>(textobj-jabraces-braces-i)
vmap ij} <Plug>(textobj-jabraces-braces-i)
omap ij{ <Plug>(textobj-jabraces-braces-i)
vmap ij{ <Plug>(textobj-jabraces-braces-i)
omap ijB <Plug>(textobj-jabraces-braces-i)
vmap ijB <Plug>(textobj-jabraces-braces-i)
omap ii <Plug>(textobj-indent-i)
vmap ii <Plug>(textobj-indent-i)
omap iI <Plug>(textobj-indent-same-i)
vmap iI <Plug>(textobj-indent-same-i)
omap if <Plug>(textobj-function-i)
vmap if <Plug>(textobj-function-i)
omap iz <Plug>(textobj-fold-i)
vmap iz <Plug>(textobj-fold-i)
noremap <silent> j gj
noremap <silent> k gk
nnoremap <silent> n nzz
xmap s <Plug>Vsurround
noremap x "_x
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <silent> <Plug>(vimshell_hide) :hide
nnoremap <silent> <Plug>(vimshell_move_end_argument) :call vimshell#mappings#move_end_argument()
nnoremap <silent> <Plug>(vimshell_paste_prompt) :call vimshell#mappings#paste_prompt()
nnoremap <silent> <Plug>(vimshell_delete_previous_output) :call vimshell#mappings#delete_previous_output()
nnoremap <silent> <Plug>(vimshell_next_prompt) :call vimshell#mappings#next_prompt()
nnoremap <silent> <Plug>(vimshell_previous_prompt) :call vimshell#mappings#previous_prompt()
nnoremap <silent> <Plug>(vimshell_enter) :call vimshell#process_enter()
onoremap <silent> <Plug>(textobj-jabraces-double-yama-kakko-i) :call g:__textobj_jabraces.select_pair("double-yama-kakko", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-double-yama-kakko-i) :call g:__textobj_jabraces.select_pair("double-yama-kakko", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-double-yama-kakko-a) :call g:__textobj_jabraces.select_pair("double-yama-kakko", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-double-yama-kakko-a) :call g:__textobj_jabraces.select_pair("double-yama-kakko", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-kakko-i) :call g:__textobj_jabraces.select_pair("kakko", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-kakko-i) :call g:__textobj_jabraces.select_pair("kakko", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-kakko-a) :call g:__textobj_jabraces.select_pair("kakko", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-kakko-a) :call g:__textobj_jabraces.select_pair("kakko", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-double-kakko-i) :call g:__textobj_jabraces.select_pair("double-kakko", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-double-kakko-i) :call g:__textobj_jabraces.select_pair("double-kakko", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-double-kakko-a) :call g:__textobj_jabraces.select_pair("double-kakko", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-double-kakko-a) :call g:__textobj_jabraces.select_pair("double-kakko", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-brackets-i) :call g:__textobj_jabraces.select_pair("brackets", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-brackets-i) :call g:__textobj_jabraces.select_pair("brackets", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-brackets-a) :call g:__textobj_jabraces.select_pair("brackets", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-brackets-a) :call g:__textobj_jabraces.select_pair("brackets", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-angles-i) :call g:__textobj_jabraces.select_pair("angles", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-angles-i) :call g:__textobj_jabraces.select_pair("angles", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-angles-a) :call g:__textobj_jabraces.select_pair("angles", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-angles-a) :call g:__textobj_jabraces.select_pair("angles", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-double-angles-i) :call g:__textobj_jabraces.select_pair("double-angles", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-double-angles-i) :call g:__textobj_jabraces.select_pair("double-angles", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-double-angles-a) :call g:__textobj_jabraces.select_pair("double-angles", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-double-angles-a) :call g:__textobj_jabraces.select_pair("double-angles", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-kikkou-kakko-i) :call g:__textobj_jabraces.select_pair("kikkou-kakko", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-kikkou-kakko-i) :call g:__textobj_jabraces.select_pair("kikkou-kakko", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-kikkou-kakko-a) :call g:__textobj_jabraces.select_pair("kikkou-kakko", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-kikkou-kakko-a) :call g:__textobj_jabraces.select_pair("kikkou-kakko", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-sumi-kakko-i) :call g:__textobj_jabraces.select_pair("sumi-kakko", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-sumi-kakko-i) :call g:__textobj_jabraces.select_pair("sumi-kakko", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-sumi-kakko-a) :call g:__textobj_jabraces.select_pair("sumi-kakko", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-sumi-kakko-a) :call g:__textobj_jabraces.select_pair("sumi-kakko", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-yama-kakko-i) :call g:__textobj_jabraces.select_pair("yama-kakko", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-yama-kakko-i) :call g:__textobj_jabraces.select_pair("yama-kakko", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-yama-kakko-a) :call g:__textobj_jabraces.select_pair("yama-kakko", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-yama-kakko-a) :call g:__textobj_jabraces.select_pair("yama-kakko", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-parens-i) :call g:__textobj_jabraces.select_pair("parens", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-parens-i) :call g:__textobj_jabraces.select_pair("parens", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-parens-a) :call g:__textobj_jabraces.select_pair("parens", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-parens-a) :call g:__textobj_jabraces.select_pair("parens", "a", "v")
onoremap <silent> <Plug>(textobj-jabraces-braces-i) :call g:__textobj_jabraces.select_pair("braces", "i", "o")
vnoremap <silent> <Plug>(textobj-jabraces-braces-i) :call g:__textobj_jabraces.select_pair("braces", "i", "v")
onoremap <silent> <Plug>(textobj-jabraces-braces-a) :call g:__textobj_jabraces.select_pair("braces", "a", "o")
vnoremap <silent> <Plug>(textobj-jabraces-braces-a) :call g:__textobj_jabraces.select_pair("braces", "a", "v")
nnoremap <Plug>(surround-.) .
onoremap <Plug>(operator-replace) g@
nnoremap <expr> <SNR>36_(count) v:count ? v:count : ''
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nmap <SNR>15_WE <Plug>AlignMapsWrapperEnd
map <SNR>15_WS <Plug>AlignMapsWrapperStart
nmap <SNR>12_success:f; <Plug>(vimrc-fold-all-expand)
nmap <SNR>12_success:;f <Plug>(vimrc-fold-all-expand)
nnoremap <Plug>(arpeggio-default:f) f
nnoremap <silent> <C-S-Tab> gT
nnoremap <silent> <C-Tab> gt
nnoremap <S-Down> -
nnoremap <S-Up> +
nnoremap <S-Left> <
nnoremap <S-Right> >
nnoremap <C-Down> :set lines-=1
nnoremap <C-Up> :set lines+=1
nnoremap <C-Left> :set columns-=5
nnoremap <C-Right> :set columns+=5
onoremap <SNR>12_success:[A %i]%i[
onoremap <SNR>12_success:A[ %i]%i[
onoremap <Plug>(arpeggio-default:[) [
vnoremap <SNR>12_success:[A %i]%i[
vnoremap <SNR>12_success:A[ %i]%i[
vnoremap <Plug>(arpeggio-default:[) [
nnoremap <SNR>12_success:[A %i]%i[
nnoremap <SNR>12_success:A[ %i]%i[
nnoremap <Plug>(arpeggio-default:[) [
onoremap <SNR>12_success:(A %i)%i(
onoremap <SNR>12_success:A( %i)%i(
onoremap <Plug>(arpeggio-default:() (
onoremap <Plug>(arpeggio-default:A) A
vnoremap <SNR>12_success:(A %i)%i(
vnoremap <SNR>12_success:A( %i)%i(
vnoremap <Plug>(arpeggio-default:() (
vnoremap <Plug>(arpeggio-default:A) A
nnoremap <SNR>12_success:(A %i)%i(
nnoremap <SNR>12_success:A( %i)%i(
nnoremap <Plug>(arpeggio-default:() (
nnoremap <Plug>(arpeggio-default:A) A
nnoremap <silent> <SNR>12_success:3; :call ChangeNL()
nnoremap <silent> <SNR>12_success:;3 :call ChangeNL()
nnoremap <Plug>(arpeggio-default:3) 3
nnoremap <silent> <SNR>12_success:2; :call ChangeFileEncoding()
nnoremap <silent> <SNR>12_success:;2 :call ChangeFileEncoding()
nnoremap <Plug>(arpeggio-default:2) 2
nnoremap <silent> <SNR>12_success:1; :call ChangeEncoding()
nnoremap <silent> <SNR>12_success:;1 :call ChangeEncoding()
nnoremap <Plug>(arpeggio-default:1) 1
nnoremap <Plug>(arpeggio-default:;) ;
noremap!  <Home>
cnoremap   <BS><Left>
inoremap  <Left>
noremap!  <Del>
noremap!  <End>
cnoremap   <BS><Right>
inoremap  <Right>
imap S <Plug>ISurround
imap s <Plug>Isurround
cnoremap  e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]
inoremap  D
cnoremap  "
cnoremap 	 *
cnoremap  +
inoremap  "
inoremap 	 *
inoremap  +
imap  <Plug>Isurround
cnoremap  =SkkMode(1)
inoremap <silent>  =SkkMode(1)
inoremap  di
cabbr al Align
cnoreabbr h@ tab help
inoreabbr <expr> dt@ strftime("%Y-%m-%d %H:%M")
inoreabbr <expr> time@ strftime("%H:%M")
inoreabbr <expr> date@ strftime("%Y-%m-%d")
let &cpo=s:cpo_save
unlet s:cpo_save
set ambiwidth=double
set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set backup
set backupdir=~/.vim/backup
set browsedir=buffer
set clipboard=
set complete=.,w,b,k,t
set diffopt=filler,vertical
set directory=~/.vim/backup
set expandtab
set fileencodings=iso-2022-jp-3,eucjp-ms,cp932,utf-8,ucs-bom,default,latin1,iso-2022-jp,iso-2022-jp-3
set fileformats=unix,dos,mac
set formatoptions=mMcroqnl2
set nofsync
set guifont=Monospace\ 12
set guioptions=aegirLt
set helplang=ja,en
set history=50
set hlsearch
set ignorecase
set iminsert=0
set imsearch=0
set incsearch
set keywordprg=:help
set laststatus=2
set lazyredraw
set listchars=tab:>-,extends:>,precedes:<,eol:.
set mouse=a
set nrformats=hex
set printfont=Monospace\ 12
set ruler
set runtimepath=~/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim72,/usr/local/share/vim/vimfiles/after,~/.vim/after,~/.vim/mine,~/work/git/vimproc,~/work/git/vimshell
set scrolloff=15
set shiftround
set shiftwidth=4
set shortmess=filnxtToOI
set showfulltag
set showmatch
set smartcase
set smartindent
set smarttab
set splitbelow
set statusline=%f%m%r%h%w\ [%{&fenc}][%{&ff}]\ [%p%%][%l/%L]\ [%{ShrinkPath('%:p:h',20)}]
set swapsync=
set tabstop=4
set tags=./tags,./TAGS,tags,TAGS,.;
set termencoding=utf-8
set notimeout
set title
set updatetime=100
set viminfo='50,h,f1,n$HOME/.viminfo
set virtualedit=all
set visualbell
set wildignore=*.o,*.obj,*.la,*.a,*.exe,*.com,*.tds
set wildmenu
set window=44
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +170 .vim/plugin/mru.vim
badd +128 /data/memo/todo.mkd
badd +38 .vim/plugin/sessionman.vim
badd +56 /data/memo/todo-blog.mkd
badd +72 /data/memo/hww.mkd
badd +4 /data/down/ClassAsingment.java
silent! argdel *
edit /data/memo/todo.mkd
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,k,t
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'mkd'
setlocal filetype=mkd
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=mMcroqnl2
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,$
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'mkd'
setlocal syntax=mkd
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 141 - ((25 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
141
normal! 029l
lcd /data/memo
tabedit ~/.vim/plugin/sessionman.vim
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,k,t
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/.vim/dict/vim.dict
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=mMn2croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 38 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
38
normal! 060l
lcd ~/
tabnext 2
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOI
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
