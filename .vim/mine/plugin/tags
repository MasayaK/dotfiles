!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CADebug	CommentAnyWay.vim	/^    command! -nargs=* CADebug   call s:Debug( <f-args> )$/;"	c
CAOnelineComment	CommentAnyWay.vim	/^command! -nargs=?           CAOnelineComment$/;"	c
CARevertComment	CommentAnyWay.vim	/^command!                    CARevertComment$/;"	c
CSBufEnter	CommentAnyWay.vim	/^augroup CSBufEnter$/;"	a
CommentAnyWay.Base.EnterInsertMode	CommentAnyWay.vim	/^func! s:CommentAnyWay.Base.EnterInsertMode( prev_line ) dict$/;"	f
CommentAnyWay.Base.FindMapping	CommentAnyWay.vim	/^func! s:CommentAnyWay.Base.FindMapping( mapkey )$/;"	f
CommentAnyWay.Base.GetIndent	CommentAnyWay.vim	/^func! s:CommentAnyWay.Base.GetIndent( lnum ) dict$/;"	f
CommentAnyWay.Base.LoadVimComments	CommentAnyWay.vim	/^func! s:CommentAnyWay.Base.LoadVimComments()$/;"	f
CommentAnyWay.Base.LoadWhenBufEnter	CommentAnyWay.vim	/^func! s:CommentAnyWay.Base.LoadWhenBufEnter()$/;"	f
CommentAnyWay.Muiltiline.BuildString	CommentAnyWay.vim	/^func! s:CommentAnyWay.Muiltiline.BuildString()$/;"	f
CommentAnyWay.Muiltiline.Init	CommentAnyWay.vim	/^func! s:CommentAnyWay.Muiltiline.Init() dict$/;"	f
CommentAnyWay.Muiltiline.InsertString	CommentAnyWay.vim	/^func! s:CommentAnyWay.Muiltiline.InsertString( str_lines, pos, ins_space ) dict$/;"	f
CommentAnyWay.Muiltiline.LoadDefinitions	CommentAnyWay.vim	/^func! s:CommentAnyWay.Muiltiline.LoadDefinitions() dict$/;"	f
CommentAnyWay.Muiltiline.Run	CommentAnyWay.vim	/^func! s:CommentAnyWay.Muiltiline.Run() dict$/;"	f
CommentAnyWay.Oneline.ChangeOnelineComment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.ChangeOnelineComment( ... )$/;"	f
CommentAnyWay.Oneline.Comment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.Comment() dict$/;"	f
CommentAnyWay.Oneline.GetOneLineComment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.GetOneLineComment()$/;"	f
CommentAnyWay.Oneline.Init	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.Init() dict$/;"	f
CommentAnyWay.Oneline.IsCommentedLine	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.IsCommentedLine() dict$/;"	f
CommentAnyWay.Oneline.JumpComment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.JumpComment() dict$/;"	f
CommentAnyWay.Oneline.LoadDefinitions	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.LoadDefinitions()$/;"	f
CommentAnyWay.Oneline.Run	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.Run() dict$/;"	f
CommentAnyWay.Oneline.Slurp	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.Slurp() dict$/;"	f
CommentAnyWay.Oneline.ToggleComment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.ToggleComment() dict$/;"	f
CommentAnyWay.Oneline.UnComment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.UnComment() dict$/;"	f
CommentAnyWay.Oneline.VariousComment	CommentAnyWay.vim	/^func! s:CommentAnyWay.Oneline.VariousComment() dict$/;"	f
Debug	CommentAnyWay.vim	/^    func! s:Debug( ... )$/;"	f
DumbBuf	dumbbuf.vim	/^augroup DumbBuf$/;"	a
DumbBufDebug	dumbbuf.vim	/^    command -nargs=+ DumbBufDebug call s:debug_command(<f-args>)$/;"	c
EchoWith	CommentAnyWay.vim	/^func! s:EchoWith( msg, hi )$/;"	f
EscapeRegexp	CommentAnyWay.vim	/^func! s:EscapeRegexp( regexp )$/;"	f
ExpandTab	CommentAnyWay.vim	/^func! s:ExpandTab( sp_num )$/;"	f
ExtendUserSetting	CommentAnyWay.vim	/^func! s:ExtendUserSetting( global_var, template )$/;"	f
FilterFileType	CommentAnyWay.vim	/^func! s:FilterFileType( dict, template )$/;"	f
GetFileTypeDef	CommentAnyWay.vim	/^func! s:GetFileTypeDef( dict, ... )$/;"	f
GetVar	CommentAnyWay.vim	/^func! s:GetVar( varname )$/;"	f
Init	CommentAnyWay.vim	/^func! s:Init()$/;"	f
InsertCommentFromMap	CommentAnyWay.vim	/^func! s:InsertCommentFromMap( flag )$/;"	f
MoveTo	winmove.vim	/^func! s:MoveTo( dest )$/;"	f
RegisterOptions	CommentAnyWay.vim	/^func! s:RegisterOptions( name, type )$/;"	f
RestoreOptions	CommentAnyWay.vim	/^func! s:RestoreOptions()$/;"	f
RunWithPos	CommentAnyWay.vim	/^func! s:RunWithPos( pos ) range$/;"	f
SDAdd	sign-diff.vim	/^command SDAdd$/;"	c
SDDebug	sign-diff.vim	/^    com! -nargs=+ SDDebug$/;"	c
SDDisable	sign-diff.vim	/^command SDDisable$/;"	c
SDEnable	sign-diff.vim	/^command SDEnable$/;"	c
SDList	sign-diff.vim	/^command SDList$/;"	c
SDToggle	sign-diff.vim	/^command SDToggle$/;"	c
SDUpdate	sign-diff.vim	/^command SDUpdate$/;"	c
SignDiffGroup	sign-diff.vim	/^augroup SignDiffGroup$/;"	a
VimShell	shell-mode.vim	/^command! VimShell$/;"	c
Warn	CommentAnyWay.vim	/^func! s:Warn( msg, ... )$/;"	f
_load_glob	nextfile.vim	/^func!	tags	/^cmd_load_glob	nextfile.vim	\/^func! s:cmd_load_glob(...)$\/;"	f$/;"	m
add_diff	sign-diff.vim	/^func! s:add_diff(filename)$/;"	f
add_misc_info	dumbbuf.vim	/^func! s:add_misc_info(bufs_info)$/;"	f
apply	sign-diff.vim	/^func! s:apply(funcname, args)$/;"	f
apply_template	vimtemplate.vim	/^func! s:apply_template(text, path)$/;"	f
buflocal_close	dumbbuf.vim	/^func! s:buflocal_close(cursor_buf, lnum, opt)$/;"	f
buflocal_mark	dumbbuf.vim	/^func! s:buflocal_mark(cursor_buf, lnum, opt)$/;"	f
buflocal_move_lower	dumbbuf.vim	/^func! s:buflocal_move_lower()$/;"	f
buflocal_move_upper	dumbbuf.vim	/^func! s:buflocal_move_upper()$/;"	f
buflocal_open	dumbbuf.vim	/^func! s:buflocal_open(cursor_buf, lnum, opt)$/;"	f
buflocal_open_onebyone	dumbbuf.vim	/^func! s:buflocal_open_onebyone(cursor_buf, lnum, opt)$/;"	f
buflocal_set_project	dumbbuf.vim	/^func! s:buflocal_set_project(cursor_buf, lnum, opt)$/;"	f
buflocal_toggle_listed_type	dumbbuf.vim	/^func! s:buflocal_toggle_listed_type(cursor_buf, lnum, opt, advance)$/;"	f
clean_up	sign-diff.vim	/^func! s:clean_up()$/;"	f
clear_signs	sign-diff.vim	/^func! s:clear_signs(filename)$/;"	f
close_dumbbuf_buffer	dumbbuf.vim	/^func! s:close_dumbbuf_buffer()$/;"	f
close_list_buffer	vimtemplate.vim	/^func! s:close_list_buffer()$/;"	f
cmd_load_glob	nextfile.vim	/^func! s:cmd_load_glob(...)$/;"	f
commit_file	sign-diff.vim	/^func! s:commit_file(filename, ...)$/;"	f
compile_mappings	dumbbuf.vim	/^func! s:compile_mappings()$/;"	f
create_buffer	shell-mode.vim	/^func! s:create_buffer()$/;"	f
create_dumbbuf_buffer	dumbbuf.vim	/^func! s:create_dumbbuf_buffer()$/;"	f
debug	dumbbuf.vim	/^fun! s:debug(msg)$/;"	f
debug	sign-diff.vim	/^    func! s:debug(cmd, ...)$/;"	f
debug_command	dumbbuf.vim	/^    func! s:debug_command(cmd, ...)$/;"	f
debugmsg	sign-diff.vim	/^func! s:debugmsg(...)$/;"	f
diffed_two_files	sign-diff.vim	/^func! s:diffed_two_files(filename)$/;"	f
dispatch_code	dumbbuf.vim	/^func! s:dispatch_code(code, idx, cursor_buf, lnum, opt)$/;"	f
do_diff_two_files	sign-diff.vim	/^func! s:do_diff_two_files(orig, new, output)$/;"	f
do_tasks	dumbbuf.vim	/^func! s:do_tasks(tasks, cursor_buf, lnum)$/;"	f
eval_command	shell-mode.vim	/^func! s:eval_command(...)$/;"	f
eval_disp_expr	dumbbuf.vim	/^func! s:eval_disp_expr(bufs)$/;"	f
eval_modeline	vimtemplate.vim	/^func! s:eval_modeline(line, path)$/;"	f
eval_sorted_bufs	dumbbuf.vim	/^func! s:eval_sorted_bufs(sorted_bufs)$/;"	f
expand_template_syntax	vimtemplate.vim	/^func! s:expand_template_syntax(line, path)$/;"	f
extend_misc_info	dumbbuf.vim	/^func! s:extend_misc_info(buf)$/;"	f
features	sign-diff.vim	/^let features = [$/;"	v
filter_shown_type_buffers	dumbbuf.vim	/^func! s:filter_shown_type_buffers(bufs_info)$/;"	f
fix_within_range	sign-diff.vim	/^func! s:fix_within_range(val, range)$/;"	f
g:SD_autocmd_add	sign-diff.vim	/^    let g:SD_autocmd_add = ['BufReadPost']$/;"	v
g:SD_autocmd_update	sign-diff.vim	/^    let g:SD_autocmd_update = ['CursorHold', 'InsertLeave', 'BufWritePost']$/;"	v
g:SD_backupdir	sign-diff.vim	/^    let g:SD_backupdir = '~\/.vim-sign-diff'$/;"	v
g:SD_comp_with	sign-diff.vim	/^    let g:SD_comp_with = s:def_comp_with$/;"	v
g:SD_debug	sign-diff.vim	/^    let g:SD_debug = 0$/;"	v
g:SD_delete_files_vimleave	sign-diff.vim	/^    let g:SD_delete_files_vimleave = 1$/;"	v
g:SD_diffexpr	sign-diff.vim	/^    let g:SD_diffexpr = &diffexpr$/;"	v
g:SD_diffopt	sign-diff.vim	/^    let g:SD_diffopt = &diffopt$/;"	v
g:SD_disable	sign-diff.vim	/^    let g:SD_disable = 0$/;"	v
g:SD_hl_diffadd	sign-diff.vim	/^    let g:SD_hl_diffadd = "DiffAdd"$/;"	v
g:SD_hl_diffchange	sign-diff.vim	/^    let g:SD_hl_diffchange = "DiffChange"$/;"	v
g:SD_hl_diffdelete	sign-diff.vim	/^    let g:SD_hl_diffdelete = "DiffDelete"$/;"	v
g:SD_hl_difftext	sign-diff.vim	/^    let g:SD_hl_difftext = "DiffText"$/;"	v
g:SD_no_update_within_seconds	sign-diff.vim	/^    let g:SD_no_update_within_seconds = 3$/;"	v
g:SD_show_signs_always	sign-diff.vim	/^    let g:SD_show_signs_always = 0$/;"	v
g:SD_sign_add	sign-diff.vim	/^    let g:SD_sign_add = '+'$/;"	v
g:SD_sign_change	sign-diff.vim	/^    let g:SD_sign_change = '*'$/;"	v
g:SD_sign_delete	sign-diff.vim	/^    let g:SD_sign_delete = '-'$/;"	v
g:SD_sign_text	sign-diff.vim	/^    let g:SD_sign_text = '@'$/;"	v
g:ca_I_enter_i_if_blank	CommentAnyWay.vim	/^    let g:ca_I_enter_i_if_blank = 1$/;"	v
g:ca_a_enter_i	CommentAnyWay.vim	/^    let g:ca_a_enter_i = 1$/;"	v
g:ca_align_back	CommentAnyWay.vim	/^    let g:ca_align_back = 1$/;"	v
g:ca_align_forward	CommentAnyWay.vim	/^    let g:ca_align_forward = 1$/;"	v
g:ca_align_wrap	CommentAnyWay.vim	/^    let g:ca_align_wrap = 1$/;"	v
g:ca_bb_space	CommentAnyWay.vim	/^    let g:ca_bb_space = ' '$/;"	v
g:ca_bf_space	CommentAnyWay.vim	/^        let g:ca_bf_space = "\\t"$/;"	v
g:ca_bf_space	CommentAnyWay.vim	/^        let g:ca_bf_space = '    '$/;"	v
g:ca_fb_space	CommentAnyWay.vim	/^    let g:ca_fb_space = ' '$/;"	v
g:ca_ff_space	CommentAnyWay.vim	/^    let g:ca_ff_space = ''$/;"	v
g:ca_filetype_support	CommentAnyWay.vim	/^    let g:ca_filetype_support = 1$/;"	v
g:ca_filetype_table	CommentAnyWay.vim	/^                        let g:ca_filetype_table[key][i]$/;"	v
g:ca_filetype_table	CommentAnyWay.vim	/^                    let g:ca_filetype_table[key]$/;"	v
g:ca_filetype_table	CommentAnyWay.vim	/^            let g:ca_filetype_table = s:ca_filetype_table$/;"	v
g:ca_filetype_table	CommentAnyWay.vim	/^    let g:ca_filetype_table = s:ca_filetype_table$/;"	v
g:ca_i_enter_i_if_blank	CommentAnyWay.vim	/^    let g:ca_i_enter_i_if_blank = 1$/;"	v
g:ca_i_read_indent	CommentAnyWay.vim	/^    let g:ca_i_read_indent = 1$/;"	v
g:ca_jump_comment	CommentAnyWay.vim	/^        let g:ca_jump_comment = 'i'$/;"	v
g:ca_jump_comment	CommentAnyWay.vim	/^    let g:ca_jump_comment = 'i'$/;"	v
g:ca_mapping_table	CommentAnyWay.vim	/^        let g:ca_mapping_table = s:ca_mapping_table$/;"	v
g:ca_mapping_table	CommentAnyWay.vim	/^        let g:ca_mapping_table =$/;"	v
g:ca_mapping_table	CommentAnyWay.vim	/^    let g:ca_mapping_table = s:ca_mapping_table$/;"	v
g:ca_multicomment_visual_insert	CommentAnyWay.vim	/^    let g:ca_multicomment_visual_insert = 1$/;"	v
g:ca_multiline_insert_pos	CommentAnyWay.vim	/^        let g:ca_multiline_insert_pos = 'o'$/;"	v
g:ca_multiline_insert_pos	CommentAnyWay.vim	/^    let g:ca_multiline_insert_pos = 'o'$/;"	v
g:ca_multiline_priority	CommentAnyWay.vim	/^        let g:ca_multiline_priority = [1, 0]$/;"	v
g:ca_multiline_priority	CommentAnyWay.vim	/^    let g:ca_multiline_priority = [0]$/;"	v
g:ca_multiline_priority	CommentAnyWay.vim	/^    let g:ca_multiline_priority = [1, 0]$/;"	v
g:ca_oneline_comment	CommentAnyWay.vim	/^    let g:ca_oneline_comment = "#"$/;"	v
g:ca_oneline_priority	CommentAnyWay.vim	/^        let g:ca_oneline_priority = [1, 0]$/;"	v
g:ca_oneline_priority	CommentAnyWay.vim	/^    let g:ca_oneline_priority   = [0]$/;"	v
g:ca_oneline_priority	CommentAnyWay.vim	/^    let g:ca_oneline_priority = [1, 0]$/;"	v
g:ca_prefix	CommentAnyWay.vim	/^    let g:ca_prefix = 'gc'$/;"	v
g:ca_toggle_comment	CommentAnyWay.vim	/^        let g:ca_toggle_comment = 'i'$/;"	v
g:ca_toggle_comment	CommentAnyWay.vim	/^    let g:ca_toggle_comment = 'i'$/;"	v
g:ca_verbose	CommentAnyWay.vim	/^    let g:ca_verbose = 0$/;"	v
g:ca_wrap_back	CommentAnyWay.vim	/^    let g:ca_wrap_back = ' %o%%o%%o%'$/;"	v
g:ca_wrap_enter_i	CommentAnyWay.vim	/^    let g:ca_wrap_enter_i = 1$/;"	v
g:ca_wrap_forward	CommentAnyWay.vim	/^    let g:ca_wrap_forward = '%o%%o%%o% '$/;"	v
g:ca_wrap_read_indent	CommentAnyWay.vim	/^    let g:ca_wrap_read_indent = 1$/;"	v
g:dumbbuf_all_shown_types	dumbbuf.vim	/^    let g:dumbbuf_all_shown_types = ['listed', 'unlisted', 'project']$/;"	v
g:dumbbuf_buffer_height	dumbbuf.vim	/^    let g:dumbbuf_buffer_height = 10$/;"	v
g:dumbbuf_buffer_width	dumbbuf.vim	/^    let g:dumbbuf_buffer_width = 25$/;"	v
g:dumbbuf_close_when_exec	dumbbuf.vim	/^    let g:dumbbuf_close_when_exec = 0$/;"	v
g:dumbbuf_cursor_pos	dumbbuf.vim	/^    let g:dumbbuf_cursor_pos = 'current'$/;"	v
g:dumbbuf_disp_expr	dumbbuf.vim	/^        let g:dumbbuf_disp_expr = {'listed': s:tmp, 'unlisted': s:tmp}$/;"	v
g:dumbbuf_disp_expr	dumbbuf.vim	/^    let g:dumbbuf_disp_expr = s:disp_expr$/;"	v
g:dumbbuf_downward	dumbbuf.vim	/^    let g:dumbbuf_downward = 1$/;"	v
g:dumbbuf_hl_cursorline	dumbbuf.vim	/^    let g:dumbbuf_hl_cursorline = 'guibg=Red  guifg=White'$/;"	v
g:dumbbuf_listed_buffer_name	dumbbuf.vim	/^    let g:dumbbuf_listed_buffer_name = '__buffers__'$/;"	v
g:dumbbuf_open_with	dumbbuf.vim	/^    let g:dumbbuf_open_with = 'botright'$/;"	v
g:dumbbuf_options	dumbbuf.vim	/^    let g:dumbbuf_options = [$/;"	v
g:dumbbuf_project_buffer_name	dumbbuf.vim	/^    let g:dumbbuf_project_buffer_name = '__project_buffers__'$/;"	v
g:dumbbuf_remove_marked_when_close	dumbbuf.vim	/^    let g:dumbbuf_remove_marked_when_close = 0$/;"	v
g:dumbbuf_shown_type	dumbbuf.vim	/^    let g:dumbbuf_shown_type = ''$/;"	v
g:dumbbuf_timeoutlen	dumbbuf.vim	/^    let g:dumbbuf_timeoutlen = 0$/;"	v
g:dumbbuf_unlisted_buffer_name	dumbbuf.vim	/^    let g:dumbbuf_unlisted_buffer_name = '__unlisted_buffers__'$/;"	v
g:dumbbuf_verbose	dumbbuf.vim	/^    let g:dumbbuf_verbose = 0$/;"	v
g:dumbbuf_vertical	dumbbuf.vim	/^    let g:dumbbuf_vertical = 0$/;"	v
g:dumbbuf_wrap_cursor	dumbbuf.vim	/^    let g:dumbbuf_wrap_cursor = 1$/;"	v
g:loaded_comment_anyway	CommentAnyWay.vim	/^let g:loaded_comment_anyway = 1$/;"	v
g:loaded_dumbbuf	dumbbuf.vim	/^let g:loaded_dumbbuf = 1$/;"	v
g:loaded_nextfile	nextfile.vim	/^let g:loaded_nextfile = 1$/;"	v
g:loaded_restart	restart.vim	/^let g:loaded_restart = 1$/;"	v
g:loaded_shell_mode	shell-mode.vim	/^let g:loaded_shell_mode = 1$/;"	v
g:loaded_sign_diff	sign-diff.vim	/^let g:loaded_sign_diff = 1$/;"	v
g:loaded_vimtemplate	vimtemplate.vim	/^let g:loaded_vimtemplate = 1$/;"	v
g:loaded_winmove	winmove.vim	/^let g:loaded_winmove = 1$/;"	v
g:nf_commands	nextfile.vim	/^    let g:nf_commands = s:commands$/;"	v
g:nf_disable_if_empty_name	nextfile.vim	/^    let g:nf_disable_if_empty_name = 0$/;"	v
g:nf_ignore_dir	nextfile.vim	/^    let g:nf_ignore_dir = 1$/;"	v
g:nf_ignore_ext	nextfile.vim	/^    let g:nf_ignore_ext = []$/;"	v
g:nf_include_dotfiles	nextfile.vim	/^    let g:nf_include_dotfiles = 0$/;"	v
g:nf_loop_files	nextfile.vim	/^    let g:nf_loop_files = 0$/;"	v
g:nf_map_next	nextfile.vim	/^    let g:nf_map_next = '<Leader>n'$/;"	v
g:nf_map_previous	nextfile.vim	/^    let g:nf_map_previous = '<Leader>p'$/;"	v
g:nf_open_command	nextfile.vim	/^    let g:nf_open_command = 'edit'$/;"	v
g:nf_sort_funcref	nextfile.vim	/^    let g:nf_sort_funcref = '<SID>sort_compare'$/;"	v
g:restart_command	restart.vim	/^    let g:restart_command = 'Restart'$/;"	v
g:shellmode_max_result	shell-mode.vim	/^    let g:shellmode_max_result = 5$/;"	v
g:shellmode_open_with	shell-mode.vim	/^    let g:shellmode_open_with = 'win'$/;"	v
g:shellmode_prompt	shell-mode.vim	/^    let g:shellmode_prompt = '$ '$/;"	v
g:vt_author	vimtemplate.vim	/^    let g:vt_author = ''$/;"	v
g:vt_command	vimtemplate.vim	/^    let g:vt_command = 'VimTemplate'$/;"	v
g:vt_email	vimtemplate.vim	/^    let g:vt_email = ''$/;"	v
g:vt_filetype_files	vimtemplate.vim	/^    let g:vt_filetype_files = ''$/;"	v
g:vt_list_buf_height	vimtemplate.vim	/^    let g:vt_list_buf_height = 7$/;"	v
g:vt_mapping	vimtemplate.vim	/^    let g:vt_mapping = 'gt'$/;"	v
g:vt_template_dir_path	vimtemplate.vim	/^    let g:vt_template_dir_path = '$HOME\/.vim\/template'$/;"	v
g:wm_move_down	winmove.vim	/^    let g:wm_move_down = '<Down>'$/;"	v
g:wm_move_left	winmove.vim	/^    let g:wm_move_left = '<Left>'$/;"	v
g:wm_move_right	winmove.vim	/^    let g:wm_move_right = '<Right>'$/;"	v
g:wm_move_up	winmove.vim	/^    let g:wm_move_up = '<Up>'$/;"	v
g:wm_move_x	winmove.vim	/^    let g:wm_move_x = 20$/;"	v
g:wm_move_y	winmove.vim	/^    let g:wm_move_y = 15$/;"	v
get_buffer_info	dumbbuf.vim	/^func! s:get_buffer_info(bufnr)$/;"	f
get_buffers_being_processed	dumbbuf.vim	/^func! s:get_buffers_being_processed(opt, cursor_buf, map_mode, first, last)$/;"	f
get_cursor_buffer	dumbbuf.vim	/^func! s:get_cursor_buffer()$/;"	f
get_files_list	nextfile.vim	/^func! s:get_files_list(...)$/;"	f
get_filetype_of	vimtemplate.vim	/^func! s:get_filetype_of(path)$/;"	f
get_highlight	dumbbuf.vim	/^func! s:get_highlight(hl_name)$/;"	f
get_idx_of_list	nextfile.vim	/^func! s:get_idx_of_list(lis, elem)$/;"	f
get_next_idx	nextfile.vim	/^func! s:get_next_idx(files, advance, cnt)$/;"	f
get_revision	sign-diff.vim	/^func! s:get_revision()$/;"	f
get_shown_type	dumbbuf.vim	/^func! s:get_shown_type(caller_bufnr)$/;"	f
glob_list	nextfile.vim	/^func! s:glob_list(expr)$/;"	f
glob_path_list	vimtemplate.vim	/^func! s:glob_path_list(path, expr)$/;"	f
goto_cmdline	shell-mode.vim	/^func! s:goto_cmdline()$/;"	f
has_elem	sign-diff.vim	/^func! s:has_elem(expr, elem)$/;"	f
init	sign-diff.vim	/^func! s:init()$/;"	f
is_available_buffer	sign-diff.vim	/^func! s:is_available_buffer(buf)$/;"	f
is_shown_type	dumbbuf.vim	/^func! s:is_shown_type(shown_type)$/;"	f
it_file	tags	/^commit_file	sign-diff.vim	\/^func! s:commit_file(filename, ...)$\/;"	f$/;"	c
jump_to_buffer	dumbbuf.vim	/^func! s:jump_to_buffer(bufnr)$/;"	f
list_signs	sign-diff.vim	/^func! s:list_signs(filename)$/;"	f
make_signs	sign-diff.vim	/^func! s:make_signs(filename, lines)$/;"	f
mkdir	sign-diff.vim	/^func! s:mkdir(path, ...)$/;"	f
msg	CommentAnyWay.vim	/^        let msg = 'g:ca_toggle_comment is allowed one of "I i a w".'$/;"	v
msg	CommentAnyWay.vim	/^        let msg = 'type error: g:ca_mapping_table is Dictionary. use default.' $/;"	v
multi_setline	vimtemplate.vim	/^func! s:multi_setline(lines)$/;"	f
name_dumbbuf_buffer	dumbbuf.vim	/^func! s:name_dumbbuf_buffer()$/;"	f
open_dumbbuf_buffer	dumbbuf.vim	/^func! s:open_dumbbuf_buffer()$/;"	f
open_file_on_cursol	vimtemplate.vim	/^func! s:open_file_on_cursol()$/;"	f
open_next_file	nextfile.vim	/^func! s:open_next_file(advance)$/;"	f
parse_buffers_info	dumbbuf.vim	/^func! s:parse_buffers_info()$/;"	f
put_reg_to_buffer	shell-mode.vim	/^func! s:put_reg_to_buffer(reg, str)$/;"	f
restart	restart.vim	/^func! s:restart(bang)$/;"	f
restore_options	dumbbuf.vim	/^func! s:restore_options()$/;"	f
revision_to_filename	sign-diff.vim	/^func! s:revision_to_filename(revision, filename)$/;"	f
run_from_local_map	dumbbuf.vim	/^func! s:run_from_local_map(code, opt, map_mode)$/;"	f
run_with_local_opt	sign-diff.vim	/^func! s:run_with_local_opt(cmd, options, is_expr, bufname)$/;"	f
s:CommentAnyWay	CommentAnyWay.vim	/^let s:CommentAnyWay = {$/;"	v
s:CommentAnyWay	CommentAnyWay.vim	/^let s:CommentAnyWay.Muiltiline = copy( s:CommentAnyWay.Base )$/;"	v
s:CommentAnyWay	CommentAnyWay.vim	/^let s:CommentAnyWay.Oneline = copy( s:CommentAnyWay.Base )$/;"	v
s:FileType	CommentAnyWay.vim	/^let s:FileType = {$/;"	v
s:Mappings	CommentAnyWay.vim	/^let s:Mappings = {$/;"	v
s:Options	CommentAnyWay.vim	/^let s:Options = []$/;"	v
s:ReplacePat	CommentAnyWay.vim	/^let s:ReplacePat = { 'Comment': {}, 'UnComment': {} }$/;"	v
s:backupdir	sign-diff.vim	/^let s:backupdir = {}$/;"	v
s:bufs_info	dumbbuf.vim	/^let s:bufs_info = {}    " buffers info. (key: bufnr)$/;"	v
s:ca_filetype_table	CommentAnyWay.vim	/^let s:ca_filetype_table = {$/;"	v
s:ca_mapping_table	CommentAnyWay.vim	/^let s:ca_mapping_table = {$/;"	v
s:cache_filetype_files	vimtemplate.vim	/^let s:cache_filetype_files = { 'cached':0, 'filenames':{} }$/;"	v
s:caller_bufnr	dumbbuf.vim	/^let s:caller_bufnr = -1    " caller buffer's bufnr which calls dumbbuf buffer.$/;"	v
s:caller_bufnr	vimtemplate.vim	/^let s:caller_bufnr = -1$/;"	v
s:check_comp_with	sign-diff.vim	/^    let s:check_comp_with = 1$/;"	v
s:check_comp_with	sign-diff.vim	/^let s:check_comp_with = 0$/;"	v
s:command_def	nextfile.vim	/^let s:command_def = {$/;"	v
s:commands	nextfile.vim	/^let s:commands = {$/;"	v
s:curbuf_lnum	shell-mode.vim	/^let s:curbuf_lnum = 1$/;"	v
s:current_shown_type	dumbbuf.vim	/^let s:current_shown_type = ''    " this must be one of 'listed', 'unlisted', 'project' while runnning mappings.$/;"	v
s:debug_errmsg	sign-diff.vim	/^    let s:debug_errmsg = []$/;"	v
s:debug_msg	dumbbuf.vim	/^let s:debug_msg = []$/;"	v
s:def_comp_with	sign-diff.vim	/^let s:def_comp_with = ['written', 'buffer']$/;"	v
s:disp_expr	dumbbuf.vim	/^let s:disp_expr = {'listed': s:listed, 'unlisted': s:listed, 'project': s:project}$/;"	v
s:dumbbuf_bufnr	dumbbuf.vim	/^let s:dumbbuf_bufnr = -1    " dumbbuf buffer's bufnr.$/;"	v
s:enabled	sign-diff.vim	/^let s:enabled = 1$/;"	v
s:files	sign-diff.vim	/^let s:files = {}$/;"	v
s:listed	dumbbuf.vim	/^let s:listed = 'printf("%s%s%s <%d> [%s]%s", (v:val.is_current ? "%" : " "), (v:val.is_marked ? "x" : " "), (v:val.is_modified ? "+" : " "), v:val.nr, bufname(v:val.nr), (v:val.project_name == "" ? "" : "@".v:val.project_name))'$/;"	v
s:mappings	dumbbuf.vim	/^    let s:mappings.user = g:dumbbuf_mappings$/;"	v
s:mappings	dumbbuf.vim	/^let s:mappings = {'user':{}, 'compiled':[]}    " buffer local mappings.$/;"	v
s:mappings	winmove.vim	/^let s:mappings = {$/;"	v
s:misc_info	dumbbuf.vim	/^let s:misc_info = {'marked_bufs':{}, 'project_name':{}}$/;"	v
s:now_processing	dumbbuf.vim	/^let s:now_processing = 0$/;"	v
s:open_with	shell-mode.vim	/^let s:open_with = {$/;"	v
s:orig_hl_cursorline	dumbbuf.vim	/^let s:orig_hl_cursorline = 0$/;"	v
s:orig_timeout	dumbbuf.vim	/^let s:orig_timeout = &timeout$/;"	v
s:orig_timeoutlen	dumbbuf.vim	/^let s:orig_timeoutlen = &timeoutlen$/;"	v
s:previous_lnum	dumbbuf.vim	/^let s:previous_lnum = -1    " lnum where a previous mapping executed.$/;"	v
s:previous_time	sign-diff.vim	/^let s:previous_time = 0$/;"	v
s:project	dumbbuf.vim	/^let s:project = 'printf("%s%s%s <%d> [%s]", (v:val.is_current ? "%" : " "), (v:val.is_marked ? "x" : " "), (v:val.is_modified ? "+" : " "), v:val.nr, bufname(v:val.nr))'$/;"	v
s:save_cpo	CommentAnyWay.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	dumbbuf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nextfile.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	restart.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	shell-mode.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	sign-diff.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vimtemplate.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	winmove.vim	/^let s:save_cpo = &cpo$/;"	v
s:shell_bufnr	shell-mode.vim	/^let s:shell_bufnr = -1$/;"	v
s:showed_prompt	shell-mode.vim	/^let s:showed_prompt = 0$/;"	v
s:shown_type_idx	dumbbuf.vim	/^let s:shown_type_idx = 0    " index for g:dumbbuf_all_shown_types.$/;"	v
s:tempname	vimtemplate.vim	/^let s:tempname = ''$/;"	v
s:tmp	dumbbuf.vim	/^        let s:tmp = copy(g:dumbbuf_disp_expr)$/;"	v
set_cursor_pos	dumbbuf.vim	/^func! s:set_cursor_pos(curbufinfo)$/;"	f
set_highlight	dumbbuf.vim	/^func! s:set_highlight(hl_name, value)$/;"	f
shell_mode_augroup	shell-mode.vim	/^augroup shell_mode_augroup$/;"	a
show_files_list	vimtemplate.vim	/^func! s:show_files_list()$/;"	f
sort_by_shown_type	dumbbuf.vim	/^func! s:sort_by_shown_type(bufs)$/;"	f
sort_compare	nextfile.vim	/^func! s:sort_compare(i, j)$/;"	f
sortfunc_numeric	dumbbuf.vim	/^func! s:sortfunc_numeric(i1, i2)$/;"	f
start_shell	shell-mode.vim	/^func! s:start_shell()$/;"	f
system	restart.vim	/^func! s:system(command, ...)$/;"	f
toggle_signs	sign-diff.vim	/^func! s:toggle_signs()$/;"	f
uneval	sign-diff.vim	/^func! s:uneval(expr)$/;"	f
update_buffers_list	dumbbuf.vim	/^func! s:update_buffers_list(...)$/;"	f
update_diff_signs	sign-diff.vim	/^func! s:update_diff_signs(filename)$/;"	f
update_only_misc_info	dumbbuf.vim	/^func! s:update_only_misc_info()$/;"	f
warn	dumbbuf.vim	/^func! s:warn(msg)$/;"	f
warn	nextfile.vim	/^func! s:warn(msg)$/;"	f
warn	restart.vim	/^func! s:warn(msg)$/;"	f
warn	shell-mode.vim	/^func! s:warn(msg)$/;"	f
warn	sign-diff.vim	/^func! s:warn(...)$/;"	f
warn	vimtemplate.vim	/^func! s:warn(msg)$/;"	f
warnf	dumbbuf.vim	/^func! s:warnf(fmt, ...)$/;"	f
warnf	nextfile.vim	/^func! s:warnf(fmt, ...)$/;"	f
warnf	restart.vim	/^func! s:warnf(fmt, ...)$/;"	f
write_buffers_list	dumbbuf.vim	/^func! s:write_buffers_list(bufs)$/;"	f
write_result	shell-mode.vim	/^func! s:write_result(args, stdout, stderr)$/;"	f
