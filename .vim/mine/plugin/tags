!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
<Plug>dumbbuf_try_to_emulate_single_key	dumbbuf.vim	/^nnoremap <silent> <Plug>dumbbuf_try_to_emulate_single_key :<C-u>call <SID>try_to_emulate_single_key()<CR>$/;"	m
<Plug>dumbbuf_try_to_emulate_single_key	dumbbuf.vim	/^noremap <silent><unique> <Plug>dumbbuf_try_to_emulate_single_key <Nop>$/;"	m
<Plug>dumbbuf_try_to_emulate_single_key	dumbbuf.vim	/^noremap! <silent><unique> <Plug>dumbbuf_try_to_emulate_single_key <Nop>$/;"	m
DumbBuf	dumbbuf.vim	/^    augroup DumbBuf$/;"	a
DumbBufDebug	dumbbuf.vim	/^    command -nargs=+ DumbBufDebug call s:debug_command(<f-args>)$/;"	c
bufleave_handler	dumbbuf.vim	/^func! s:bufleave_handler()$/;"	f
buflocal_close	dumbbuf.vim	/^func! s:buflocal_close(opt)$/;"	f
buflocal_move_lower	dumbbuf.vim	/^func! s:buflocal_move_lower()$/;"	f
buflocal_move_upper	dumbbuf.vim	/^func! s:buflocal_move_upper()$/;"	f
buflocal_open	dumbbuf.vim	/^func! s:buflocal_open(opt)$/;"	f
buflocal_open_onebyone	dumbbuf.vim	/^func! s:buflocal_open_onebyone(opt)$/;"	f
buflocal_select	dumbbuf.vim	/^func! s:buflocal_select(opt)$/;"	f
buflocal_toggle_listed_type	dumbbuf.vim	/^func! s:buflocal_toggle_listed_type(opt)$/;"	f
close_dumbbuf_buffer	dumbbuf.vim	/^func! s:close_dumbbuf_buffer()$/;"	f
create_dumbbuf_buffer	dumbbuf.vim	/^func! s:create_dumbbuf_buffer()$/;"	f
debug	dumbbuf.vim	/^fun! s:debug(msg)$/;"	f
debug_command	dumbbuf.vim	/^    func! s:debug_command(cmd, ...)$/;"	f
dispatch_code	dumbbuf.vim	/^func! s:dispatch_code(code, no, opt)$/;"	f
do_tasks	dumbbuf.vim	/^func! s:do_tasks(tasks, cursor_buf, lnum)$/;"	f
emulate_single_key	dumbbuf.vim	/^func! s:emulate_single_key()$/;"	f
eval_disp_expr	dumbbuf.vim	/^func! s:eval_disp_expr(buf)$/;"	f
filter_bufs_info	dumbbuf.vim	/^func! s:filter_bufs_info(curbufinfo, shown_type)$/;"	f
g:dumbbuf_buffer_height	dumbbuf.vim	/^    let g:dumbbuf_buffer_height = 10$/;"	v
g:dumbbuf_buffer_width	dumbbuf.vim	/^    let g:dumbbuf_buffer_width = 25$/;"	v
g:dumbbuf_close_when_exec	dumbbuf.vim	/^    let g:dumbbuf_close_when_exec = 0$/;"	v
g:dumbbuf_cursor_pos	dumbbuf.vim	/^    let g:dumbbuf_cursor_pos = 'current'$/;"	v
g:dumbbuf_disp_expr	dumbbuf.vim	/^    let g:dumbbuf_disp_expr = 'printf("%s %s[%s] %s <%d> %s", (val.is_selected ? "x" : " "), (val.is_current ? "*" : " "), bufname(val.nr), (val.is_modified ? "[+]" : "   "), val.nr, fnamemodify(bufname(val.nr), ":p:h"))'$/;"	v
g:dumbbuf_disp_expr	dumbbuf.vim	/^    let g:dumbbuf_disp_expr = substitute(g:dumbbuf_disp_expr, '\\<v:val\\>'.'\\C', 'val', 'g')$/;"	v
g:dumbbuf_downward	dumbbuf.vim	/^    let g:dumbbuf_downward = 1$/;"	v
g:dumbbuf_listed_buffer_name	dumbbuf.vim	/^    let g:dumbbuf_listed_buffer_name = '__buffers__'$/;"	v
g:dumbbuf_open_with	dumbbuf.vim	/^    let g:dumbbuf_open_with = 'botright'$/;"	v
g:dumbbuf_options	dumbbuf.vim	/^    let g:dumbbuf_options = [$/;"	v
g:dumbbuf_shown_type	dumbbuf.vim	/^    let g:dumbbuf_shown_type = ''$/;"	v
g:dumbbuf_single_key	dumbbuf.vim	/^    let g:dumbbuf_single_key = 0$/;"	v
g:dumbbuf_single_key_echo_stack	dumbbuf.vim	/^    let g:dumbbuf_single_key_echo_stack = 1$/;"	v
g:dumbbuf_unlisted_buffer_name	dumbbuf.vim	/^    let g:dumbbuf_unlisted_buffer_name = '__unlisted_buffers__'$/;"	v
g:dumbbuf_updatetime	dumbbuf.vim	/^    let g:dumbbuf_updatetime = 100$/;"	v
g:dumbbuf_verbose	dumbbuf.vim	/^    let g:dumbbuf_verbose = 0$/;"	v
g:dumbbuf_vertical	dumbbuf.vim	/^    let g:dumbbuf_vertical = 0$/;"	v
g:dumbbuf_wrap_cursor	dumbbuf.vim	/^    let g:dumbbuf_wrap_cursor = 1$/;"	v
g:loaded_dumbbuf	dumbbuf.vim	/^let g:loaded_dumbbuf = 1$/;"	v
get_buffer_info	dumbbuf.vim	/^func! s:get_buffer_info(bufnr)$/;"	f
get_buffers_being_processed	dumbbuf.vim	/^func! s:get_buffers_being_processed(opt, cursor_buf)$/;"	f
get_cursor_buffer	dumbbuf.vim	/^func! s:get_cursor_buffer()$/;"	f
get_prev_count	dumbbuf.vim	/^func! s:get_prev_count()$/;"	f
get_shown_type	dumbbuf.vim	/^func! s:get_shown_type(caller_bufnr)$/;"	f
jump_to_buffer	dumbbuf.vim	/^func! s:jump_to_buffer(bufnr)$/;"	f
open_dumbbuf_buffer	dumbbuf.vim	/^func! s:open_dumbbuf_buffer(shown_type)$/;"	f
parse_buffers_info	dumbbuf.vim	/^func! s:parse_buffers_info()$/;"	f
run_from_local_map	dumbbuf.vim	/^func! s:run_from_local_map(code, opt)$/;"	f
s:bufs_info	dumbbuf.vim	/^let s:bufs_info = {}    " buffers info. (key: bufnr)$/;"	v
s:caller_bufnr	dumbbuf.vim	/^let s:caller_bufnr = -1    " caller buffer's bufnr which calls dumbbuf buffer.$/;"	v
s:current_shown_type	dumbbuf.vim	/^let s:current_shown_type = ''    " this must be one of '', 'listed', 'unlisted'.$/;"	v
s:debug_msg	dumbbuf.vim	/^let s:debug_msg = []$/;"	v
s:dumbbuf_bufnr	dumbbuf.vim	/^let s:dumbbuf_bufnr = -1    " dumbbuf buffer's bufnr.$/;"	v
s:mappings	dumbbuf.vim	/^    let s:mappings.user = g:dumbbuf_mappings$/;"	v
s:mappings	dumbbuf.vim	/^let s:mappings = {'default': {}, 'user': {}}    " buffer local mappings.$/;"	v
s:mappings	dumbbuf.vim	/^let s:mappings.default = {$/;"	v
s:mappings	dumbbuf.vim	/^let s:mappings.single_key = {$/;"	v
s:mapstack	dumbbuf.vim	/^let s:mapstack = ''$/;"	v
s:mapstack_count	dumbbuf.vim	/^let s:mapstack_count = -1$/;"	v
s:orig_updatetime	dumbbuf.vim	/^let s:orig_updatetime = &updatetime$/;"	v
s:previous_lnum	dumbbuf.vim	/^let s:previous_lnum = -1    " lnum where a previous mapping executed.$/;"	v
s:save_cpo	dumbbuf.vim	/^let s:save_cpo = &cpo$/;"	v
s:selected_bufs	dumbbuf.vim	/^let s:selected_bufs = {}    " selected buffers info.$/;"	v
set_cursor_pos	dumbbuf.vim	/^func! s:set_cursor_pos(curbufinfo)$/;"	f
try_to_emulate_single_key	dumbbuf.vim	/^func! s:try_to_emulate_single_key()$/;"	f
update_buffers_list	dumbbuf.vim	/^func! s:update_buffers_list(...)$/;"	f
update_only_marks	dumbbuf.vim	/^func! s:update_only_marks()$/;"	f
warn	dumbbuf.vim	/^func! s:warn(msg)$/;"	f
write_buffers_list	dumbbuf.vim	/^func! s:write_buffers_list(bufs)$/;"	f
