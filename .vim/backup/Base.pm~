package Text::Tokenizer::Class::Base;

use strict;
use warnings;
use utf8;

use version;
our $VERSION = qv('0.0.0');


use base qw(Class::Accessor::Fast);
__PACKAGE__->mk_accessors(qw(matched_string matched_pattern));

use Carp qw(croak);
use Data::Util qw(:validate);
use Text::Tokenizer::Class::Constant;





sub step {
    my $self = instance(shift, $BASE);
    my $pat = scalar(@_) ? shift : $self->matched_pattern();
    my $c = $self->matched_char();
    my $word = "";
    my $str_fh = $self->string();

    while (1) {
        $word .= $c;
        $c = $str_fh->getc;
        return $word   unless defined $c;

        if (defined $pat) {
            unless ($self->_is_match($c, $pat)) {
                $self->_dprintf("not match $c. return $word...");
                # XXX: if can't seek string?
                $str_fh->seek(-1, 1);
                return $word;
            }
        } else {
            # called from default handler
            if ($self->is_ignored_char($c)) {
                return $word;
            }
        }
    }

    croak "never reach this block!";
}

sub clear_all {
    my $self = instance(shift, $BASE);
    $self->clear_ignored_chars();
    $self->clear_pattern();
    $self->string(undef);
}



1;
__END__

=head1 NAME

Text::Tokenizer::Class::Base - Base package of Text::Tokenizer::Class::Token::*



=head1 METHODS

=over 1

=item step()

get string continuing with $self->matched_pattern().


=item step_while()


=item clear_all()

call clear_ignored_chars() and clear_pattern() and set_string(undef).


=back



=head1 SYNOPSIS

    use Text::Tokenizer::Class;

    my $parser = Text::Tokenizer::Class->new(parse_type => 'handler');
    $parser->set_string("Hello, World");
    $parser->add_pattern(
        qr/[\w]/ => sub {
            my ($self, $c) = @_;
            my $word = "";

            while (1) {
                $word .= $c;
                $c = $self->string()->getc;
                last    unless defined $c;
            }
            say $word;
        };
    );
    $parser->parse(post_stop_if_found => 1);    # => "Hello\nWorld"
  


=head1 DEPENDENCIES

Data::Util
Class::Accessor::Fast


=head1 BUGS

    No known bugs.


=head1 AUTHOR

tyru  C<< <tyru.exe+perl@gmail.com> >>


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2009, tyru C<< <tyru.exe+perl@gmail.com> >>. All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

