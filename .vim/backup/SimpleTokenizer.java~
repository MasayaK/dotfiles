package calc;
import java.io.*;
import java.util.*;

// FIXME: 範囲が重複しているとエラーになるはず


class SimpleTokenizer {

    private String strBuf;
    private int currentPos;
    // TODO: テーブルを使う
    ArrayList<TokenTable> tokens;
    private String ignoreChars;


    SimpleTokenizer() {
        this(null);
    }
    SimpleTokenizer(String s) {
        if (s == null)
            this.strBuf = null;
        else
            this.strBuf = new String(s);
        clear();
    }

    public String getBuffer() {
        return this.strBuf;
    }
    public void setBuffer(String s) {
        this.strBuf = new String(s);
    }

    // 無視する文字
    public String getIgnoreChars() {
        return this.ignoreChars;
    }
    public void setIgnoreChars(String s) {
        this.ignoreChars = new String(s);
    }
    public boolean isIgnoreChar(char ch) {
        for (char ignoreCh : this.ignoreChars.toCharArray()) {
            if (ignoreCh == ch) {
                return true;
            }
        }
        return false;
    }

    public void addToken(int id, char ch) {
        addToken(id, ch, ch);
    }
    public void addToken(int id, char first, char end) {
        tokens.add(new TokenTable(id, first, end));
    }
    public void clear() {
        this.strBuf = null;
        this.currentPos = 0;
        this.tokens = new ArrayList<TokenTable>();
        this.ignoreChars = null;
    }


    public Token nextToken() throws SyntaxError, NullPointerException {
        if (this.strBuf == null) {
            throw new NullPointerException("バッファがセットされていません");
        }

        Token token = new Token();
        StringBuffer tokenStr = new StringBuffer();

        while (this.currentPos < strBuf.length()) {
            char ch = strBuf.charAt(this.currentPos);
            this.currentPos++;
            if (isIgnoreChar(ch)) {
                if (token.id == Token.UNDEFINED_TOKEN) {
                    continue;
                } else {
                    break;
                }
            }

            dprint("read " + ch + ", pos " + (this.currentPos - 1));

            // 1個だけTokenTableを読み込む
            TokenTable matchedTable = null;
            for (TokenTable table : this.tokens) {
                if (table.inRange(ch)) {
                    dprint("matched table: id " + table.id + ", " + table.first + " -> " + table.end);
                    matchedTable = table;
                    break;
                }
            }
            if (matchedTable == null) {    // TokenTableが見つからなかった
                throw new SyntaxError("E005: unknown char '" + ch + "' found");
            }


            if (token.id == Token.UNDEFINED_TOKEN) {
                dprint("new table " + matchedTable.id);
                token.id = matchedTable.id;
                tokenStr.append(ch);
            } else {
                if (token.id == matchedTable.id) {
                    tokenStr.append(ch);
                } else {
                    this.currentPos--;
                    break;
                }
            }
        }

        // 文字列を読み込んでいればそれを返し、
        // 読み込んでいなかったらnullを返す
        if (tokenStr.length() == 0) {
            return null;
        } else {
            token.sval = tokenStr.toString();
            dprint("* return token '" + token.sval + "' and id is " + token.id + " *");
            return token;
        }
    }

    public boolean debug = true;
    private void dprint(String msg) {
        if (debug)
            System.err.println(msg);
    }
}

