use strict;
use warnings;
use utf8;    # 一応

use lib "$ENV{HOME}/git/Text-Tokenizer-Class/lib";

use Encode qw(find_encoding);
use Perl6::Say;
use Text::Tokenizer::Class;

my $sjis = find_encoding('sjis');
# my $parser = Text::Tokenizer::Class->new(parse_type => 'handler', _verbose => 1);
my $parser = Text::Tokenizer::Class->new(parse_type => 'handler');
$parser->ignored_chars(',');

# ダブルクォートがある場合
$parser->add_pattern(
    '"' => sub {
        my $word = shift->step_until(qr/[^"]/);
        warn "### bar: read $word ###\n";
        say $sjis->encode(substr($word, 1));
    }
);
# ない場合
$parser->add_pattern(
    qr/[^"]/ => sub {
        my $word = shift->step_until(qr/[^,]/);
        warn "### foo: read $word ###\n";
        say $sjis->encode($word);
    }
);

while (<DATA>) {
    say "-------------------";
    print $sjis->encode("$.:$_");
    say "-------------------";
    $parser->set_string($_);
    $parser->parse();
}



# Wikipediaより
# http://ja.wikipedia.org/wiki/Comma-Separated_Values

__END__
日本国,東京,127767944
"日本国","東京","127767944"
"日本国","東京",127767944
