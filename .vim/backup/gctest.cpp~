
#include "gc_cpp.h"
#include <iostream>
#include <cstdlib>
#include <sys/time.h>
#include <sys/resource.h>

// http://akigamyl.wiki.exeexe.net/wiki/C%E8%A8%80%E8%AA%9E:%E3%82%AD%E3%83%BC%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%80%81%E6%A4%9C%E5%87%BA
// for kbhit()
#include <cstdio>
#include <unistd.h>
#include <termios.h>


static struct termios t_orig;

void begin_kbhit( void ) {
    struct termios t;

    tcgetattr( 0, &t );
    t_orig = t;
    t.c_lflag &= ~(ICANON|ECHO);
    t.c_cc[VMIN] = 0;
    tcsetattr( 0, TCSADRAIN, &t );

}

char kbhit( void ) {
    char c;
    int status = read( 0, &c, sizeof(char) );
    return status ? c : (char)status;
}

void end_kbhit( void ) {
    tcsetattr( 0, TCSADRAIN, &t_orig );
} 



const int IN_ALLOC_NUM = 100;
const int EX_ALLOC_NUM = 1000;


class Test : public gc {
    char p[IN_ALLOC_NUM];
};

class TestCleanUp : public gc_cleanup {
};


void
testTest() {
    Test *ptr;

    std::cout << "new Test..." << std::endl;
    while (! kbhit()) {
        ptr = new Test;
    }
}

void
testTestCleanUp() {
    TestCleanUp *ptr;

    std::cout << "new TestCleanUp..." << std::endl;
    while (! kbhit()) {
        ptr = new TestCleanUp;
    }
}

int
main() {
    struct rusage   before, after;

    if (getrusage(RUSAGE_SELF, &before) == -1) {
        perror("getrusage before");
        return EXIT_FAILURE;
    }

    begin_kbhit();
    testTest();
    testTestCleanUp();
    end_kbhit();


    if (getrusage(RUSAGE_SELF, &after) == -1) {
        perror("getrusage after");
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
