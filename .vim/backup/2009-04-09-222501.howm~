= *Programming* *idea* プログラミング言語を作るなら
[2009-04-09 22:25]


思いついた順に書いてく
あと途中cf.とかついてるのはなんとなく思い出したものとか
それと話があんまり具体的じゃないっていうかまぁなんか垂れ流してるだけです
テンションが完全に深夜なので読み流してください


*** まず

- 関数はfirst class objectであること
- クロージャ
- GC完備
- ライブラリとして
-- 正規表現
-- 並列処理(マルチスレッド、ファイバ、アクター)
-- ソケット
-- 複素数、虚数などの数値計算 cf. C# - decimal
-- その他いろいろ
- SchemeのS式を逆にしたような言語(Scalaみたいなもの)
  例えば
  1 .. 10 each say
  とできる。「..」もメソッド(かマクロ)。
  (foreachっていうより普通「それぞれ」ならeachって言うよね)
- Schemeのマクロ(old typeとnew typeそれぞれ)を持つ。
  マクロとして定義することでメソッドの実行時のオーバーヘッドを失くしたり、
  その他いろいろ便利だったり
  (実際今時関数呼び出しのオーバーヘッドってどれくらいかかるんだろう)
  cf. C++ - inline
- 関数は入れ子にできる。
  括弧でくくるとスコープを作りだせる。


*** 次に

- 予約語はなし(でもそうすることに何の意味が？)
- whileとかforとかifとかtryとか用意されてるものは全部メソッド。
  Scalaでもwhileの構文を定義することはできるけど、whileという語を再定義はできない。
- 実行形式にできる
  cf. Scala, Java, Java - exewrap, Ruby - Exerb, Python - py2exe
- でかい数値計算も誤差なくできる(GMPを標準装備とか？)
- 実行時にオブジェクトの型情報やメソッド名を参照できる。
  cf. Perl - CORE::ref, Perl - Scalar::Util::blessed
- 他の言語の恩恵(ライブラリとか単純に実行時の速度だとか)を受けられるようにする。
  cf. Perl - XS, Perl - Inline::*
- 変数にアクセスする時に挙動を決定できる、
  例えばオーバーロード、Perlのtieとかいったものを持つ
- アスペクト指向プログラミングを補助するもの
- 型の違いはコンパイル時にわかる
- スクリプト言語としても実行可能
- Perlみたいにシンボルテーブルにアクセス可能
  cf. Perl - PadWalker
- スタックを消費しない呼び出し
  cf. Perl - goto &SUBNAME



*** つぶやき

- ていうか読み易いのとできるだけ短く書きたいっていう両方の要求を満たすのは難しいと思う
- (ScalaでPerlの$obj->$method()って書き方をしたいんだけどどうやるのかな)
- printはprint、printlnはsay
- pは何？
- 全てメソッドとか重そう
- 全てオブジェクト。クラスは無し。
  (でもオブジェクトばっかりってメモリの効率的あるいは速度的にどうなんだろう)
- いややっぱPerlみたいにクラスじゃなくてパッケージとか使った方法で...いややっぱり(ry
- さくっと書くためには標準で備わってる関数とかちょっとした機能がいっぱいあったほうが
  なんだかんだ言って得？
  cf. Perl - perldoc perlvar
- 記号はどこまでメソッドとして定義できればいいだろうか
  「.」とか「()」は？
  cf. operator()(), operator,()
- なんでもできるプログラミング言語、というのは存在しない。
  例えばfという関数からgを呼ぶということを考えると、
  >|
  gがfの中の情報を書きかえることができる
  |<
  のと
  >|
  fはgに渡したくない・変えることのできない情報を定義できる
  |<
  という定義が同時に成り立つことはない。
- Perlみたいに「なんでも」できて多数のライブラリを持ち、
  Schemeのような美しさを持ち、
  Cのように「なんでも」できて速い、
  しかもJavaやC#のような移植性を持ち、
  Erlangのように並列実行を得意とし、
  Luaのように組込み用途にも使え、
  他の多数の言語で書かれたコードの再利用ができ、
  大人も子供もおねーさんも楽々使える、そんな言語
- 日本語のメソッド名も用意する。変換ツールあり
  1 から 10 を それぞれ 表示
- 標準関数(Scalaで言えばscala.PreDef以下のメソッドみたいなもの)の名前は
  なるべく短く、「_」などの記号を含まず、全て小文字(Perlっぽく)
  (ワンライナーとかでも使いたい)
- まぁPerlみたく「短く書く」とかワンライナー的なことをするなら
  クラスごとに分かれてるとメソッド名長くなるだろうなー
  1 .. 10 each print
  はprintが標準関数だからいいけどモジュールの(パッケージに属した)
  メソッドとかはかなり長くなりそう
- エンコーディングの問題とそれによって起きる(その言語の)脆弱性はできるだけなくす。
  自分で指定してエンコードも可能だけど「何か」宣言とかすれば
  自動で変換してくれるぐらい賢ければいいんだけど・・・

- Schemeはすごいけど(なんですごいのかもう忘れたけど)
  語順がSVOなのがいち日本人としてちょっと受けいれ難かったので

# 引数はどこに置けば一番自然だろうか
1 .. 100 each fn((n) :
    if (n % 15 == 0)
        "FizzBuzz"
    else if (n % 5 == 0)
        "Buzz"
    else if (n % 3 == 0)
        "Fizz"
    else
        n
    => print
)

- ↑みたいに引数は一応何らかの配列としても受けとれるけど
  「名前」を付けておくこともできる
  cf. JavaScript, Perl - $@, Perl6
- ifとかwhileにendいらないのとかelse ifとかelseifあるいはelsifだとか
  そういう細かいことは今はおいておく
- 「=>」はオブジェクト(その前の結果)を次の関数オブジェクトの引数としてその関数をコールする
- 「->」はオブジェクトから複数のメソッドなどを呼び出したいときに便利

# 適当(あんまキレイじゃないのはなんで？)
obj->(
    func1 : args,
    func2 : args,    # 末尾の,は許す
)

- これらは全てマクロ標準関数あるいは標準マクロ(?)
- 「<-」なんてのがあったら面白いかも
  cf. Perl - Scope::Upper, Perl - Continuation::Escape
- 括弧にも(, [, {, <とかいろいろあるしそれぞれに意味を持たせてみると面白いかも
- ++, ::, :::, ', :, @, $, %, etc...
- Perlのqwやqqとかもマクロで実装
- sigilの利点ってなんだろう
- それぞれの言語への変換とかできたらいいな
- 自分が言ったことをコードに変換とかできたらいいな
- 考えるの疲れてきたな



*** 知りたい言語・気になる言語

- Haskell
- Erlang
- Scheme(Gauche本読んだけど継続の章で(ry )
- SmallTalk
- LOGO
- Objective C
