#ifndef __FOOSCHEME_TOKENIZER_H__
#define __FOOSCHEME_TOKENIZER_H__

#include "debug.h"
#include "token.h"

#include <string>
#include <set>



typedef std::multiset<Token>  TokenTable;


class Tokenizer {

public:

    Tokenizer() {
        reset();
    }


    void 
    reset() {
        this->pos            = 0;
        this->tokenNum       = 0;
        this->text           = "";
        this->table.clear();
        this->ignoredChars   = "";
    }


    void
    setText(const std::string& s) {
        reset();
        this->text = s;
    }
    const std::string&
    getText() const {
        return this->text;
    }

    void
    setPos(size_t pos) {
        if (pos > (size_t)this->text.size())
            throw std::out_of_range("arg size_t pos is out of range");
        else
            this->pos = pos;
    }
    size_t
    getPos() {
        return this->pos;
    }


    void
    ignoreChar(char c) {
        this->ignoredChars.append(1, c);
    }


    TokenTable&
    getTokenTable() {
        return this->table;
    }

    void
    addToken(const Token& token) {
        this->table.insert(token);
    }
    // void
    // addToken(const Token& token) {
    //     this->table.insert(token);
    // }

    void
    clearToken() {
        this->table.clear();
    }


    // TODO: Token::iterator‚ð•Ô‚·getTokens()


    Token&
    nextToken() {
        std::string matchBuf;
        Token findToken;

        while (! eof()) {
            matchBuf.append(1, text.at(pos++));

            if (this->tokenNum == 0) {
                findToken.id   = NON_INITIALIZED_TOKEN;
                findToken.sval = matchBuf;
                if (this->table.find(findToken)) {
                }
            } else if (this->tokenNum == 1) {
            } else {
            }
        }
    }

    bool
    eof() {
        return this->pos >= (size_t)this->text.size();
    }


private:

    enum  {
        NON_INITIALIZED_TOKEN = -1,
    };

private:

    size_t      pos;
    size_t      tokenNum;
    std::string text;
    TokenTable  table;
    std::string ignoredChars;

};

#endif
