
class Foo(s:String, n:Int) {
    var sval:String = s
    var nval:Int    = n

    def this(s:String) = this(s, 0)
    def this(n:Int)    = this("", n)

    override def toString() = this.sval
}



object Main extends Application {

    // 何故スコープを限定するかというと
    // implicit def Foo2Int ... することで
    // println(bar + " bar") が "0 bar" と評価されてしまうため。
    // 全てをオブジェクトとそのメソッド呼び出しによって実現しているため
    // Perlのoverload.pmほど簡単に文字列以外に評価された場合の挙動を決定できない。
    // (というかそもそも暗黙の型変換はバグの元に成り得るので
    // 使わないほうがいい？)
    {
        implicit def Foo2Int(foo:Foo) : Int = foo.nval

        val foo = new Foo(1)
        println(foo + 1)    // 2
        println(2 + foo)    // 3
    }
    {
        // 文字列の場合はクラスメソッドtoString()をオーバーライドすればいい

        val bar = new Foo("foo")
        println(bar + " bar")    // foo bar
        println("hoge " + bar)    // hoge foo
    }
}


// vim:ft=scala:
