


    /*  -------------"--------------- */
    /* "`wrapped^"                    */



"WRAPPED_TEXT"

"WRAPPED_TEXT" =

- "WRAPPED_TEXT" =

- "WRAPPED_TEXT"


    /*  -------------#if--------------- */
    /* #if `0^                          */
    /* `cursor^                         */
    /* #endif                           */



#if 0

#endif

#if 0_TYPED

#endif =

- #if 0

#endif =

- #if 0

#endif


    /*  -------------#if_--------------- */
    /* #if `0^                           */
    /* `wrapped^                         */
    /* `cursor^                          */
    /* #endif                            */



#if 0
WRAPPED_TEXT

#endif

#if 0_TYPED
WRAPPED_TEXT

#endif =

- #if 0
WRAPPED_TEXT

#endif =

- #if 0
WRAPPED_TEXT

#endif


    /*  -------------#ifdef--------------- */
    /* #ifdef `identifier^                 */
    /* `cursor^                            */
    /* #endif                              */



#ifdef identifier

#endif

#ifdef identifier_TYPED

#endif =

- #ifdef identifier

#endif =

- #ifdef identifier

#endif


    /*  -------------#ifdef_--------------- */
    /* #ifdef `identifier^                  */
    /* `wrapped^                            */
    /* `cursor^                             */
    /* #endif                               */



#ifdef identifier
WRAPPED_TEXT

#endif

#ifdef identifier_TYPED
WRAPPED_TEXT

#endif =

- #ifdef identifier
WRAPPED_TEXT

#endif =

- #ifdef identifier
WRAPPED_TEXT

#endif


    /*  -------------#ifndef--------------- */
    /* #ifndef `symbol^                     */
    /* #     define `symbol^                */
    /*                                      */
    /* `cursor^                             */
    /* #endif `$CL^ `symbol^ `$CR^          */



#ifndef TEST
#     define TEST

 
#endif /* TEST */

#ifndef SYMBOL_TYPED
#     define SYMBOL_TYPED

 
#endif /* SYMBOL_TYPED */ =

- #ifndef TEST
#     define TEST

 
#endif /* TEST */ =

- #ifndef TEST
#     define TEST

 
#endif /* TEST */


    /*  -------------#ifndef_--------------- */
    /* #ifndef `identifier^                  */
    /* `wrapped^                             */
    /* `cursor^                              */
    /* #endif                                */



#ifndef identifier
WRAPPED_TEXT

#endif

#ifndef identifier_TYPED
WRAPPED_TEXT

#endif =

- #ifndef identifier
WRAPPED_TEXT

#endif =

- #ifndef identifier
WRAPPED_TEXT

#endif


    /*  -------------#inc--------------- */
    /* #include <`^.h>                   */



#include <.h>

#include <_TYPED.h> =

- #include <.h> =

- #include <.h>


    /*  -------------#include_user--------------- */
    /* #include "`me^.h"                          */



#include "test.h"

#include "me_TYPED.h" =

- #include "test.h" =

- #include "test.h"


    /*  -------------#ind--------------- */
    /* #include "`me^.h"                 */



#include "test.h"

#include "me_TYPED.h" =

- #include "test.h" =

- #include "test.h"


    /*  -------------'--------------- */
    /* '`wrapped^'                    */



'WRAPPED_TEXT'

'WRAPPED_TEXT' =

- 'WRAPPED_TEXT' =

- 'WRAPPED_TEXT'


    /*  -------------(--------------- */
    /* (`wrapped^)                    */



(WRAPPED_TEXT)

    (WRAPPED_TEXT) =

    - (WRAPPED_TEXT) =

    - (WRAPPED_TEXT)


    /*  -------------<--------------- */
    /* <`wrapped^>                    */



<WRAPPED_TEXT>

<WRAPPED_TEXT> =

- <WRAPPED_TEXT> =

- <WRAPPED_TEXT>


    /*  -------------[--------------- */
    /* [`wrapped^]                    */



[WRAPPED_TEXT]

[WRAPPED_TEXT] =

- [WRAPPED_TEXT] =

- [WRAPPED_TEXT]


    /*  -------------`--------------- */
    /* \``wrapped^\`                  */



`WRAPPED_TEXT`

`WRAPPED_TEXT` =

- `WRAPPED_TEXT` =

- `WRAPPED_TEXT`


    /*  -------------all--------------- */
    /* `v^.begin(), `v^.end(), `cursor^ */



v.begin(), v.end(), 

        v_TYPED.begin(), v_TYPED.end(),  =

        - v.begin(), v.end(),  =

        - v.begin(), v.end(), 


    /*  -------------assert--------------- */
    /* assert(`isTrue^, "`text^")          */



        assert(isTrue, "text")

        assert(isTrue_TYPED, "text_TYPED") =

        - assert(isTrue, "text") =

        - assert(isTrue, "text")


    /*  -------------Author--------------- */
    /* `$author^                           */



        drdr.xp

        drdr.xp =

        - drdr.xp =

        - drdr.xp


    /*  -------------bitfield--------------- */
    /* struct `structName^                   */
    /* {                                     */
    /*     `type^ `field^ : `bits^;`         */
    /*     `...^                             */
    /*     `type^ `field^ : `bits^;`         */
    /*     `...^                             */
    /* }` `var^^;                            */



        struct structName
        {
            type field : bits;
            type field : bits;
            type field : bits;
        } ;

struct structName_TYPED
{
    type_TYPED field_TYPED : bits_TYPED;
        _TYPED
} var_TYPED; =

- struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
} ; =

- struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
} ;


    /*  -------------call_--------------- */
    /* `name^(`wrapped^`, `p?^)`cursor^   */



name(WRAPPED_TEXT)

    name_TYPED(WRAPPED_TEXT, p_TYPED, p_TYPED) =

    - name(WRAPPED_TEXT) =

    - name(WRAPPED_TEXT)


    /*  -------------class---------------                 */
    /* class `className^                                  */
    /* {                                                  */
    /* public:                                            */
    /*     `className^( `ctorParam^ );                    */
    /*     ~`className^();                                */
    /*     `className^( const `className^ &cpy );         */
    /*     `cursor^                                       */
    /* private:                                           */
    /* };                                                 */
    /*                                                    */
    /* `className^::`className^( `ctorParam^ )            */
    /* {                                                  */
    /* }                                                  */
    /*                                                    */
    /* `className^::~`className^()                        */
    /* {                                                  */
    /* }                                                  */
    /*                                                    */
    /* `className^::`className^( const `className^ &cpy ) */
    /* {                                                  */
    /* }                                                  */



    class className
    {
    public:
        className( ctorParam );
        ~className();
        className( const className &cpy );
        
    private:
    };
     
    className::className( ctorParam )
    {
    }
     
    className::~className()
    {
    }
     
    className::className( const className &cpy )
    {
    }

class className_TYPED
{
public:
    className_TYPED( ctorParam_TYPED );
    ~className_TYPED();
    className_TYPED( const className_TYPED &cpy );
    
private:
};
 
className_TYPED::className_TYPED( ctorParam_TYPED )
{
}
 
className_TYPED::~className_TYPED()
{
}
 
className_TYPED::className_TYPED( const className_TYPED &cpy )
{
} =

- class className
{
public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
private:
};
 
className::className( ctorParam )
{
}
 
className::~className()
{
}
 
className::className( const className &cpy )
{
} =

- class className
{
public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
private:
};
 
className::className( ctorParam )
{
}
 
className::~className()
{
}
 
className::className( const className &cpy )
{
}


    /*  -------------comment--------------- */
    /* `$CL^ `cursor^ `$CR^                 */



/*  */

/*  */ =

- /*  */ =

- /*  */


    /*  -------------comment_--------------- */
    /* `$CL^ `wrapped^ `$CR^                 */



/* WRAPPED_TEXT */

/* WRAPPED_TEXT */ =

- /* WRAPPED_TEXT */ =

- /* WRAPPED_TEXT */


    /*  -------------commentBlock--------------- */
    /* `$CL^                                     */
    /*  `$CM^ `cursor^                           */
    /*  `$CR^                                    */



/* 
 * 
 */

/* 
 * 
 */ =

- /* 
 * 
 */ =

- /* 
 * 
 */


    /*  -------------commentDoc--------------- */
    /* `$CL^`$CM^                              */
    /*  `$CM^ `cursor^                         */
    /*  `$CR^                                  */



/** 
 * 
 */

/** 
 * 
 */ =

- /** 
 * 
 */ =

- /** 
 * 
 */


    /*  -------------commentLine--------------- */
    /* `$CS^ `cursor^                           */



// 
//
//  =
//
- //  =

- // 


    /*  -------------commentLine2--------------- */
    /* `$CL^ `cursor^ `$CR^                      */



/*  */

/*  */ =

- /*  */ =

- /*  */


    /*  -------------do---------------           */
    /* do`$WHILE_BRACKET_STL^{                   */
    /*     `cursor^                              */
    /* }`$WHILE_BRACKET_STL^while (`condition^); */



do
{
    
}
while (condition);

do
{
    
}
while (condition_TYPED); =

- do
{
    
}
while (condition); =

- do
{
    
}
while (condition);


    /*  -------------else--------------- */
    /* else`$IF_BRACKET_STL^{            */
    /*     `cursor^                      */
    /* }                                 */



else
{
    
}

else
{
    
} =

- else
{
    
} =

- else
{
    
}


    /*  -------------else_--------------- */
    /* else`$IF_BRACKET_STL^{             */
    /*     `wrapped^                      */
    /* }                                  */



else
{
    WRAPPED_TEXT
}

else
{
    WRAPPED_TEXT
} =

- else
{
    WRAPPED_TEXT
} =

- else
{
    WRAPPED_TEXT
}


    /*  -------------Email--------------- */
    /* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com =

- drdr.xp@gmail.com =

- drdr.xp@gmail.com


    /*  -------------enum--------------- */
    /* enum `name^                       */
    /* {                                 */
    /*     `elt^;`                       */
    /*     `...^                         */
    /* }` `var^;                         */



enum name
{
    elt;
    elt;
    elt;
} var;

enum name_TYPED
{
    elt_TYPED;
        _TYPED
} var_TYPED; =

- enum name
{
    elt;
    elt;
    elt;
} var; =

- enum name
{
    elt;
    elt;
    elt;
} var;


    /*  -------------fcomment--------------- */
    /* /**                                   */
    /*  * @author : `$author^ | `$email^     */
    /*  * @description                       */
    /*  *     `cursor^                       */
    /*  * @return {`int^} `desc^             */
    /*  _cmt_                                */



/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */

/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int_TYPED} desc_TYPED
 */ =

- /**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */ =

- /**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */


    /*  -------------File--------------- */
    /* `file()^                          */



test.page

test.page =

- test.page =

- test.page


    /*  -------------filehead---------------                                  */
    /* /**-------------------------/// `sum^ \\\---------------------------   */
    /*  *                                                                     */
    /*  * <b>`function^</b>                                                   */
    /*  * @version : `1.0^                                                    */
    /*  * @since : `strftime("%Y %b %d")^                                     */
    /*  *                                                                     */
    /*  * @description :                                                      */
    /*  *     `cursor^                                                        */
    /*  * @usage :                                                            */
    /*  *                                                                     */
    /*  * @author : `$author^ | `$email^                                      */
    /*  * @copyright `.com.cn^                                                */
    /*  * @TODO :                                                             */
    /*  *                                                                     */
    /*  *--------------------------\\\ `sum^ ///---------------------------_cmt_ */



/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 Sep 02
 * 
 * @description :
 *     
 * @usage : 
 * 
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright .com.cn 
 * @TODO : 
 * 
 *--------------------------\\\ sum ///---------------------------*/


/**-------------------------/// sum_TYPED \\\---------------------------
 *
 * <b>function_TYPED</b>
 * @version : 10_TYPED
 * @since : 2009 Sep 02
 * 
 * @description :
 *     
 * @usage : 
 * 
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright comcn_TYPED 
 * @TODO : 
 * 
 *--------------------------\\\ sum_TYPED ///---------------------------*/
 =

 - /**-------------------------/// sum \\\---------------------------
  *
  * <b>function</b>
  * @version : 1.0
  * @since : 2009 Sep 02
  * 
  * @description :
  *     
  * @usage : 
  * 
  * @author : drdr.xp | drdr.xp@gmail.com
  * @copyright .com.cn 
  * @TODO : 
  * 
  *--------------------------\\\ sum ///---------------------------*/
  =

  - /**-------------------------/// sum \\\---------------------------
   *
   * <b>function</b>
   * @version : 1.0
   * @since : 2009 Sep 02
   * 
   * @description :
   *     
   * @usage : 
   * 
   * @author : drdr.xp | drdr.xp@gmail.com
   * @copyright .com.cn 
   * @TODO : 
   * 
   *--------------------------\\\ sum ///---------------------------*/
  


    /*  -------------for---------------                             */
    /* for (`int^ `i^ = `0^; `i^ < `len^; ++`i^) `$IF_BRACKET_STL^{ */
    /*     `cursor^                                                 */
    /* }                                                            */



  for (int i = 0; i < len; ++i) 
  {
      
  }

for (int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED) 
{
    
} =

- for (int i = 0; i < len; ++i) 
{
    
} =

- for (int i = 0; i < len; ++i) 
{
    
}


    /*  -------------forever--------------- */
    /* for (;;) `body^                      */



for (;;) /* void */;

for (;;) body_TYPED =

- for (;;) /* void */; =

- for (;;) /* void */;


    /*  -------------forr---------------                               */
    /* for (`int^ `i^ = `n^; `i^ >`=^ `end^; --`i^) `$IF_BRACKET_STL^{ */
    /*     `cursor^                                                    */
    /* }                                                               */



for (int i = n; i >= end; --i) 
{
    
}

for (int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED) 
{
    
} =

- for (int i = n; i >= end; --i) 
{
    
} =

- for (int i = n; i >= end; --i) 
{
    
}


    /*  -------------fprintf--------------- */
    /* printf( "`pattern^"`elts^ )          */



printf( "pattern" )

printf( "pattern_TYPED" ) =

- printf( "pattern" ) =

- printf( "pattern" )


    /*  -------------fun---------------                                                   */
    /* `c_fun_type_indent()^`int^`c_fun_body_indent()^`name^(`param^)`$FUNC_BRACKET_STL^{ */
    /*     `cursor^                                                                       */
    /* }                                                                                  */



    int
name()
{
    
}

    int_TYPED
name_TYPED(param_TYPED)
{
    
} =

-     int
name()
{
    
} =

-     int
name()
{
    
}


    /*  -------------if---------------     */
    /* if (`condition^)`$IF_BRACKET_STL^{  */
    /*     `job^                           */
    /* }` `else...^                        */



if (condition)
{ 
    /* void */;
}
else
{ 
    
}

if (condition_TYPED)
{ 
    job_TYPED
} else_TYPED =

- if (condition)
{ 
    /* void */;
}
else
{ 
    
} =

- if (condition)
{ 
    /* void */;
}
else
{ 
    
}


    /*  -------------if0---------------    */
    /* if (`condition^)`$IF_BRACKET_STL^{  */
    /*     `job^                           */
    /* }` `else...^                        */



if (0 == var)
{ 
    /* void */;
}
else
{ 
    
}

if (0 == var_TYPED)
{ 
    job_TYPED
} else_TYPED =

- if (0 == var)
{ 
    /* void */;
}
else
{ 
    
} =

- if (0 == var)
{ 
    /* void */;
}
else
{ 
    
}


    /*  -------------if_---------------   */
    /* if (`condition^)`$IF_BRACKET_STL^{ */
    /*     `wrapped^                      */
    /* }                                  */



if (condition)
{
    WRAPPED_TEXT
}

if (condition_TYPED)
{
    WRAPPED_TEXT
} =

- if (condition)
{
    WRAPPED_TEXT
} =

- if (condition)
{
    WRAPPED_TEXT
}


    /*  -------------ifee---------------  */
    /* if (`condition^)`$IF_BRACKET_STL^{ */
    /*     `job^                          */
    /* }` `else_if...^                    */



if (condition)
{
    /* void */;
}
else if (condition)
{
    /* void */;
}
else if (condition)
{
    /* void */;
}

if (condition_TYPED)
{
    job_TYPED
} else_if_TYPED =

- if (condition)
{
    /* void */;
}
else if (condition )
{
    /* void */;
}
else if (condition )
{
    /* void */;
} =

- if (condition)
{
    /* void */;
}
else if (condition)
{
    /* void */;
}
else if (condition)
{
    /* void */;
}


    /*  -------------ifn---------------    */
    /* if (`condition^)`$IF_BRACKET_STL^{  */
    /*     `job^                           */
    /* }` `else...^                        */



if (NULL == var)
{ 
    /* void */;
}
else
{ 
    
}

if (NULL == var_TYPED)
{ 
    job_TYPED
} else_TYPED =

- if (NULL == var)
{ 
    /* void */;
}
else
{ 
    
} =

- if (NULL == var)
{ 
    /* void */;
}
else
{ 
    
}


    /*  -------------ifn0---------------   */
    /* if (`condition^)`$IF_BRACKET_STL^{  */
    /*     `job^                           */
    /* }` `else...^                        */



if (0 != var)
{ 
    /* void */;
}
else
{ 
    
}

if (0 != var_TYPED)
{ 
    job_TYPED
} else_TYPED =

- if (0 != var)
{ 
    /* void */;
}
else
{ 
    
} =

- if (0 != var)
{ 
    /* void */;
}
else
{ 
    
}


    /*  -------------ifnn---------------   */
    /* if (`condition^)`$IF_BRACKET_STL^{  */
    /*     `job^                           */
    /* }` `else...^                        */



if (NULL != var)
{ 
    /* void */;
}
else
{ 
    
}

if (NULL != var_TYPED)
{ 
    job_TYPED
} else_TYPED =

- if (NULL != var)
{ 
    /* void */;
}
else
{ 
    
} =

- if (NULL != var)
{ 
    /* void */;
}
else
{ 
    
}


    /*  -------------main---------------                                        */
    /* `c_fun_type_indent()^int`c_fun_body_indent()^main(int argc, char **argv) */
    /* {                                                                        */
    /*     `cursor^                                                             */
    /*     return 0;                                                            */
    /* }                                                                        */



    int
main(int argc, char **argv)
{
    
    return 0;
}

    int
main(int argc, char **argv)
{
    
    return 0;
} =

-     int
main(int argc, char **argv)
{
    
    return 0;
} =

-     int
main(int argc, char **argv)
{
    
    return 0;
}


    /*  -------------map---------------    */
    /* std::map<`typeKey^,`val^>   `name^; */
    /* `cursor^                            */



std::map<typeKey,val>   name;


std::map<typeKey_TYPED,val_TYPED>   name_TYPED;
 =

 - std::map<typeKey,val>   name;
  =

  - std::map<typeKey,val>   name;
  


    /*  -------------namespace--------------- */
    /* namespace `name^                       */
    /* {                                      */
    /*     `cursor^                           */
    /* }                                      */



  namespace name
  {
      
  }

namespace name_TYPED
{
    
} =

- namespace name
{
    
} =

- namespace name
{
    
}


    /*  -------------once--------------- */
    /* #ifndef `symbol^                  */
    /* #     define `symbol^             */
    /*                                   */
    /* `cursor^                          */
    /* #endif `$CL^ `symbol^ `$CR^       */



#ifndef __TEST_PAGE__
#     define __TEST_PAGE__


#endif /* __TEST_PAGE__ */

#ifndef symbol_TYPED
#     define symbol_TYPED


#endif /* symbol_TYPED */ =

- #ifndef __TEST_PAGE__
#     define __TEST_PAGE__


#endif /* __TEST_PAGE__ */ =

- #ifndef __TEST_PAGE__
#     define __TEST_PAGE__


#endif /* __TEST_PAGE__ */


    /*  -------------para--------------- */
    /* @param {`Object^} `name^ `desc^   */



para

para =

- para =

- para


    /*  -------------printf--------------- */
    /* printf( "`pattern^"`elts^ )         */



printf( "pattern" )

printf( "pattern_TYPED" ) =

- printf( "pattern" ) =

- printf( "pattern" )


    /*  -------------snprintf--------------- */
    /* printf( "`pattern^"`elts^ )           */



printf( "pattern" )

printf( "pattern_TYPED" ) =

- printf( "pattern" ) =

- printf( "pattern" )


    /*  -------------sprintf--------------- */
    /* printf( "`pattern^"`elts^ )          */



printf( "pattern" )

printf( "pattern_TYPED" ) =

- printf( "pattern" ) =

- printf( "pattern" )


    /*  -------------struct--------------- */
    /* struct `structName^                 */
    /* {                                   */
    /*     `type^ `field^;`                */
    /*     `...^                           */
    /*     `type^ `field^;`                */
    /*     `...^                           */
    /* }` `var^^;                          */



struct structName
{
    type field;
    type field;
    type field;
} ;

struct structName_TYPED
{
    type_TYPED field_TYPED;
        _TYPED
} var_TYPED; =

- struct structName
{
    type field;
    type field;
    type field;
} ; =

- struct structName
{
    type field;
    type field;
    type field;
} ;


    /*  -------------switch--------------- */
    /* switch (`var^)`$IF_BRACKET_STL^{    */
    /*     case `constant^ :               */
    /*         `job^                       */
    /*         break;                      */
    /* `                                   */
    /*     `case...`                       */
    /* ^`                                  */
    /*     `default...^                    */
    /* }                                   */



switch (var)
{
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
}

switch (var_TYPED)
{
    case constant_TYPED :
        job_TYPED
        break;

    case_TYPED

    default_TYPED
} =

- switch (var)
{
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
} =

- switch (var)
{
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
}


    /*  -------------templateclass---------------                                              */
    /* template                                                                                */
    /*     <`templateParam^>                                                                   */
    /* class `className^                                                                       */
    /* {                                                                                       */
    /* public:                                                                                 */
    /*     `className^( `ctorParam^ );                                                         */
    /*     ~`className^();                                                                     */
    /*     `className^( const `className^ &cpy );                                              */
    /*     `cursor^                                                                            */
    /* private:                                                                                */
    /* };                                                                                      */
    /*                                                                                         */
    /* template <`templateParam^>                                                              */
    /* `className^<`_^cleanTempl(R('templateParam'))^^>::`className^( `ctorParam^ )            */
    /* {                                                                                       */
    /* }                                                                                       */
    /*                                                                                         */
    /* template <`templateParam^>                                                              */
    /* `className^<`_^cleanTempl(R('templateParam'))^^>::~`className^()                        */
    /* {                                                                                       */
    /* }                                                                                       */
    /*                                                                                         */
    /* template <`templateParam^>                                                              */
    /* `className^<`_^cleanTempl(R('templateParam'))^^>::`className^( const `className^ &cpy ) */
    /* {                                                                                       */
    /* }                                                                                       */



template
    <templateParam>
class className
{
public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
private:
};
 
template <templateParam>
className<templateParam>::className( ctorParam )
{
}
 
template <templateParam>
className<templateParam>::~className()
{
}
 
template <templateParam>
className<templateParam>::className( const className &cpy )
{
}

template
    <templateParam_TYPED>
class className_TYPED
{
public:
    className_TYPED( ctorParam_TYPED );
    ~className_TYPED();
    className_TYPED( const className_TYPED &cpy );
    
private:
};
 
template <templateParam_TYPED>
className_TYPED<templateParam_TYPED>::className_TYPED( ctorParam_TYPED )
{
}
 
template <templateParam_TYPED>
className_TYPED<templateParam_TYPED>::~className_TYPED()
{
}
 
template <templateParam_TYPED>
className_TYPED<templateParam_TYPED>::className_TYPED( const className_TYPED &cpy )
{
} =

- template
    <templateParam>
class className
{
public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
private:
};
 
template <templateParam>
className<templateParam>::className( ctorParam )
{
}
 
template <templateParam>
className<templateParam>::~className()
{
}
 
template <templateParam>
className<templateParam>::className( const className &cpy )
{
} =

- template
    <templateParam>
class className
{
public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
private:
};
 
template <templateParam>
className<templateParam>::className( ctorParam )
{
}
 
template <templateParam>
className<templateParam>::~className()
{
}
 
template <templateParam>
className<templateParam>::className( const className &cpy )
{
}


    /*  -------------try--------------- */
    /* try                              */
    /* {                                */
    /*     `what^                       */
    /* }`...^                           */
    /* catch ( `except^ )               */
    /* {                                */
    /*     `handler^                    */
    /* }`...^                           */



try
{
    what
}
catch ( except )
{
    /* void */
}
catch ( except )
{
    /* void */
}

try
{
    what_TYPED
}_TYPED =

- try
{
    what
}
catch ( except )
{
    /* void */
}
catch ( except )
{
    /* void */
} =

- try
{
    what
}
catch ( except )
{
    /* void */
}
catch ( except )
{
    /* void */
}


    /*  -------------try_--------------- */
    /* try                               */
    /* {                                 */
    /*     `wrapped^                     */
    /* }                                 */
    /* `...^catch ( `except^ )           */
    /* {                                 */
    /*     `handler^                     */
    /* }`...^                            */



try
{
    WRAPPED_TEXT
}
catch ( except )
{
    /* void */
}catch ( except )
{
    /* void */
}


try
{
    WRAPPED_TEXT
}
_TYPED
 =

 - try
 {
     WRAPPED_TEXT
 }
 catch ( except )
 {
     /* void */
 }catch ( except )
 {
     /* void */
 }
  =

  - try
  {
      WRAPPED_TEXT
  }
  catch ( except )
  {
      /* void */
  }catch ( except )
  {
      /* void */
  }
  


    /*  -------------vector--------------- */
    /* std::vector<`type^> `var^;          */
    /* `cursor^                            */



std::vector<type> var;


std::vector<type_TYPED> var_TYPED;
 =

 - std::vector<type> var;
  =

  - std::vector<type> var;
  


    /*  -------------while---------------       */
    /* while (`condition^)`$WHILE_BRACKET_STL^{ */
    /*     `cursor^                             */
    /* }                                        */



  while (condition)
  {
      
  }

while (condition_TYPED)
{
    
} =

- while (condition)
{
    
} =

- while (condition)
{
    
}


    /*  -------------while0---------------       */
    /* do`$WHILE_BRACKET_STL^{                   */
    /*     `cursor^                              */
    /* }`$WHILE_BRACKET_STL^while (`condition^); */



do
{
    
}
while (false);

do
{
    
}
while (false); =

- do
{
    
}
while (false); =

- do
{
    
}
while (false);


    /*  -------------while1---------------      */
    /* while (`condition^)`$WHILE_BRACKET_STL^{ */
    /*     `cursor^                             */
    /* }                                        */



while (true)
{
    
}

while (true)
{
    
} =

- while (true)
{
    
} =

- while (true)
{
    
}


    /*  -------------whilenn---------------     */
    /* while (`condition^)`$WHILE_BRACKET_STL^{ */
    /*     `cursor^                             */
    /* }                                        */



while (NULL != var)
{
    
}

while (NULL != var_TYPED)
{
    
} =

- while (NULL != var)
{
    
} =

- while (NULL != var)
{
    
}


    /*  -------------{--------------- */
    /* {`wrapped^}                    */



{WRAPPED_TEXT}

{WRAPPED_TEXT} =

- {WRAPPED_TEXT} =

- {WRAPPED_TEXT}

