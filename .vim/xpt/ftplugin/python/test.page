


    #  -------------"_--------------- 
    # "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    #  -------------'_--------------- 
    # '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    #  -------------(_--------------- 
    # (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    #  -------------<_--------------- 
    # <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    #  -------------[_--------------- 
    # [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    #  -------------`_--------------- 
    # \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    #  -------------Author--------------- 
    # `$author^                           



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    #  -------------class--------------- 
    # class `className^ `inherit^^:      
    #     def __init__( self `args^^):   
    #         `cursor^                   



class className :
    def __init__( self ):
        

        class className_TYPED inherit_TYPED:
            def __init__( self args_TYPED):
                 b

a class className :
    def __init__( self ):
         b

a class className :
    def __init__( self ):
        


    #  -------------def--------------- 
    # def `fun_name^( `para*^ ):       
    #     `cursor^                     



def fun_name(  ):
    

    def fun_name_TYPED( para_TYPED, para_TYPED, para_TYPED ):
         b

a def fun_name(  ):
     b

a def fun_name(  ):
    


    #  -------------elif--------------- 
    # elif `condition^:                 
    #     `cursor^                      



elif condition:
    

    elif condition_TYPED:
         b

a elif condition:
     b

a elif condition:
    


    #  -------------else--------------- 
    # else:                             
    #     `cursor^                      



else:
    

    else:
         b

a else:
     b

a else:
    


    #  -------------Email--------------- 
    # `$email^                           



drdr.xp@gmail.com

drdr.xp@gmail.com b

a drdr.xp@gmail.com b

a drdr.xp@gmail.com


    #  -------------File--------------- 
    # `file()^                          



test.page

test.page b

a test.page b

a test.page


    #  -------------for--------------- 
    # for `var^ in range(`0^):         
    #     `cursor^                     



for var in range(0):
    

    for var_TYPED in range(0_TYPED):
         b

a for var in range(0):
     b

a for var in range(0):
    


    #  -------------forin--------------- 
    # for `vars^ in `array^:             
    #     `cursor^                       



for vars in array:
    

    for vars_TYPED in array_TYPED:
         b

a for vars in array:
     b

a for vars in array:
    


    #  -------------if--------------- 
    # if `cond^:                      
    #     `pass^                      
    # ``elif...`                      
    # ^`else...^                      



if cond:
    pass
elif cond2:
    pass
elif cond2:
    pass
elif cond2:
    pass
else:
    

    if cond_TYPED:
        pass_TYPED
    elif_TYPED
else_TYPED b

a if cond:
    pass
elif cond2:
    pass
elif cond2:
    pass
elif cond2:
    pass
else:
     b

a if cond:
    pass
elif cond2:
    pass
elif cond2:
    pass
elif cond2:
    pass
else:
    


    #  -------------ifmain--------------- 
    # if __name__ == "__main__" :         
    #     `cursor^                        



if __name__ == "__main__" :
    

    if __name__ == "__main__" :
         b

a if __name__ == "__main__" :
     b

a if __name__ == "__main__" :
    


    #  -------------lambda--------------- 
    # (lambda `args^ : `expr^)            



(lambda args : expr)

(lambda args_TYPED : expr_TYPED) b

a (lambda args : expr) b

a (lambda args : expr)


    #  -------------try--------------- 
    # try:                             
    #     `what^                       
    # except `Exception^:              
    #     `pass^                       
    # ``more_except...`                
    # ^``else...`                      
    # ^`finally...^                    



try:
    # nothing
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
else:
    pass
finally:
    

    try:
        what_TYPED
    except Exception_TYPED:
        pass_TYPED
    more_except_TYPED
else_TYPED
    finally_TYPED b

a try:
    # nothing
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
else:
    pass
finally:
     b

a try:
    # nothing
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
else:
    pass
finally:
    


    #  -------------try_--------------- 
    # try:                              
    #     `wrapped^                     
    # except `Exception^:               
    #     `pass^                        
    # ``more_except...`                 
    # ^``else...`                       
    # ^`finally...^                     



try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
else:
    pass
finally:
    

    try:
        WRAPPED_TEXT
            WRAPPED_TEXT_line2
    except Exception_TYPED:
        pass_TYPED
    more_except_TYPED
else_TYPED
    finally_TYPEDb

a try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
else:
    pass
finally:
    b

a try:
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
except Exception:
    pass
else:
    pass
finally:
    


    #  -------------{_--------------- 
    # {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

