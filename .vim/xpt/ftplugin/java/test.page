


    //  -------------"_--------------- 
    // "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    //  -------------'_--------------- 
    // '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    //  -------------(_--------------- 
    // (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    //  -------------<_--------------- 
    // <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    //  -------------[_--------------- 
    // [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    //  -------------`_--------------- 
    // \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    //  -------------Author--------------- 
    // `$author^                           



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    //  -------------class---------------                          
    // public class `className^ {                                  
    //     public `className^(` `ctorParam` ^)`$FUNC_BRACKET_STL^{ 
    //         `cursor^                                            
    //     }                                                       
    // }                                                           



public class className {
    public className( ctorParam ) {
        
    }
}

public class className_TYPED {
    public className_TYPED( ctorParam_TYPED ) {
        
    }
} b

a public class className {
    public className( ctorParam ) {
        
    }
} b

a public class className {
    public className( ctorParam ) {
        
    }
}


    //  -------------comment--------------- 
    // `$CL^ `what^ `$CR^                   



/* what */

/* what_TYPED */ b

a /* what */ b

a /* what */


    //  -------------comment_--------------- 
    // `$CL^ `wrapped^ `$CR^                 



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    //  -------------commentBlock--------------- 
    // `$CL^                                     
    //  `$CM^ `cursor^                           
    //  `$CR^                                    



/* 
 * 
 */

/* 
 * 
 */ b

a /* 
 * 
 */ b

a /* 
 * 
 */


    //  -------------commentBlock_--------------- 
    // `$CL^                                      
    //  `$CM^ `wrapped^                           
    //  `$CR^                                     



/* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    //  -------------commentDoc--------------- 
    // `$CL^`$CM^                              
    //  `$CM^ `cursor^                         
    //  `$CR^                                  



/** 
 * 
 */

/** 
 * 
 */ b

a /** 
 * 
 */ b

a /** 
 * 
 */


    //  -------------commentDoc_--------------- 
    // `$CL^`$CM^                               
    //  `$CM^ `wrapped^                         
    //  `$CR^                                   



/** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    //  -------------commentLine--------------- 
    // `$CL^ `what^ `$CR^                       



/* what */

/* what_TYPED */ b

a /* what */ b

a /* what */


    //  -------------commentLine_--------------- 
    // `$CL^ `wrapped^ `$CR^                     



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    //  -------------do---------------           
    // do`$WHILE_BRACKET_STL^{                   
    //     `cursor^                              
    // }`$WHILE_BRACKET_STL^while (`condition^); 



do {
    
} while (condition);

do {
    
} while (condition_TYPED); b

a do {
    
} while (condition); b

a do {
    
} while (condition);


    //  -------------elif---------------       
    // else if (`condition^)`$IF_BRACKET_STL^{ 
    //     `job^                               
    // }                                       



else if (condition) {
    /* void */;
}

else if (condition_TYPED) {
    job_TYPED
} b

a else if (condition) {
    /* void */;
} b

a else if (condition) {
    /* void */;
}


    //  -------------else--------------- 
    // else`$IF_BRACKET_STL^{            
    //     `cursor^                      
    // }                                 



else {
    
}

else {
    
} b

a else {
    
} b

a else {
    
}


    //  -------------else_--------------- 
    // else`$IF_BRACKET_STL^{             
    //     `wrapped^                      
    // }                                  



else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    //  -------------Email--------------- 
    // `$email^                           



drdr.xp@gmail.com

drdr.xp@gmail.com b

a drdr.xp@gmail.com b

a drdr.xp@gmail.com


    //  -------------enum--------------- 
    // `public^ enum `enumName^          
    // {                                 
    //     `elem^` `...^,                
    //     `subElem^` `...^              
    // };                                
    // `cursor^                          



public enum enumName
{
    elem,
    subElem,
    subElem,
    subElem
};


public_TYPED enum enumName_TYPED
{
    elem_TYPED _TYPED
};
 b

 a public enum enumName
 {
     elem,
     subElem,
     subElem,
     subElem
 };
  b

  a public enum enumName
  {
      elem,
      subElem,
      subElem,
      subElem
  };
  


    //  -------------File--------------- 
    // `file()^                          



test.page

test.page b

a test.page b

a test.page


    //  -------------for---------------                             
    // for (`int^ `i^ = `0^; `i^ < `len^; ++`i^) `$IF_BRACKET_STL^{ 
    //     `cursor^                                                 
    // }                                                            



for (int i = 0; i < len; ++i)  {
    
}

for (int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED)  {
    
} b

a for (int i = 0; i < len; ++i)  {
    
} b

a for (int i = 0; i < len; ++i)  {
    
}


    //  -------------foreach---------------               
    // for ( `type^ `var^ : `inWhat^ )`$FOR_BRACKET_STL^{ 
    //     `cursor^                                       
    // }                                                  



for ( type var : inWhat ) {
    
}

for ( type_TYPED var_TYPED : inWhat_TYPED ) {
    
} b

a for ( type var : inWhat ) {
    
} b

a for ( type var : inWhat ) {
    
}


    //  -------------forr---------------                               
    // for (`int^ `i^ = `n^; `i^ >`=^ `end^; --`i^) `$IF_BRACKET_STL^{ 
    //     `cursor^                                                    
    // }                                                               



for (int i = n; i >= end; --i)  {
    
}

for (int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED)  {
    
} b

a for (int i = n; i >= end; --i)  {
    
} b

a for (int i = n; i >= end; --i)  {
    
}


    //  -------------if---------------                     
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



if (condition) { 
    /* void */;
}
else {
    
}

if (condition_TYPED) { 
    job_TYPED
} else_TYPED b

a if (condition) { 
    /* void */;
}
else {
    
} b

a if (condition) { 
    /* void */;
}
else {
    
}


    //  -------------if0---------------                    
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



if (0 == var) { 
    /* void */;
}
else {
    
}

if (0 == var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (0 == var) { 
    /* void */;
}
else {
    
} b

a if (0 == var) { 
    /* void */;
}
else {
    
}


    //  -------------if_---------------   
    // if (`condition^)`$IF_BRACKET_STL^{ 
    //     `wrapped^                      
    // }                                  



if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if (condition_TYPED) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    //  -------------ifee---------------  
    // if (`condition^)`$IF_BRACKET_STL^{ 
    //     `job^                          
    // }` `else_if...^                    



if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
}

if (condition_TYPED) {
    job_TYPED
} else_if_TYPED b

a if (condition) {
    /* void */;
} else if (condition ) {
    /* void */;
} else if (condition ) {
    /* void */;
} else if (condition ) {
    /* void */;
} b

a if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
}


    //  -------------ifn---------------                    
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



if (null == var) { 
    /* void */;
}
else {
    
}

if (null == var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (null == var) { 
    /* void */;
}
else {
    
} b

a if (null == var) { 
    /* void */;
}
else {
    
}


    //  -------------ifn0---------------                   
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



if (0 != var) { 
    /* void */;
}
else {
    
}

if (0 != var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (0 != var) { 
    /* void */;
}
else {
    
} b

a if (0 != var) { 
    /* void */;
}
else {
    
}


    //  -------------ifnn---------------                   
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



if (null != var) { 
    /* void */;
}
else {
    
}

if (null != var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (null != var) { 
    /* void */;
}
else {
    
} b

a if (null != var) { 
    /* void */;
}
else {
    
}


    //  -------------main---------------                            
    // public static void main( String[] args )`$FUNC_BRACKET_STL^{ 
    //     `cursor^                                                 
    // }                                                            



public static void main( String[] args ) {
    
}

public static void main( String[] args ) {
    
} b

a public static void main( String[] args ) {
    
} b

a public static void main( String[] args ) {
    
}


    //  -------------private--------------- 
    // private `type^ `varName^;            



private type varName;

private type_TYPED varName_TYPED; b

a private type varName; b

a private type varName;


    //  -------------prop--------------- 
    // `type^ `varName^;                 
    //                                   
    // `get...^                          
    // `set...^                          



type varName;

public type getVarName()
    { return varName; }

public type setVarName( type val )
    { varName = val; return varName; }


    type_TYPED varName_TYPED;
    
    get_TYPED
    set_TYPED b

    a type varName;
    
    public type getVarName()
        { return varName; }
    
    public type setVarName( type val )
        { varName = val; return varName; }
     b

     a type varName;
     
     public type getVarName()
         { return varName; }
     
     public type setVarName( type val )
         { varName = val; return varName; }
     


    //  -------------protected--------------- 
    // protected `type^ `varName^;            



         protected type varName;

         protected type_TYPED varName_TYPED; b

         a protected type varName; b

         a protected type varName;


    //  -------------public--------------- 
    // public `type^ `varName^;            



         public type varName;

         public type_TYPED varName_TYPED; b

         a public type varName; b

         a public type varName;


    //  -------------switch--------------- 
    // switch (`var^)`$IF_BRACKET_STL^{    
    //     case `constant^ :               
    //         `job^                       
    //         break;                      
    // `                                   
    //     `case...`                       
    // ^`                                  
    //     `default...^                    
    // }                                   



         switch (var) {
             case constant :
                 /* void */;
                 break;
         
             case constant :
                 /* void */;
                 break;
         
             case constant :
                 /* void */;
                 break;
         
             case constant :
                 /* void */;
                 break;
         
             default:
                 
         }

switch (var_TYPED) {
    case constant_TYPED :
        job_TYPED
        break;

    case_TYPED

    default_TYPED
} b

a switch (var) {
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
} b

a switch (var) {
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
}


    //  -------------try--------------- 
    // try                              
    // {                                
    //     `what^                       
    // }` `catch...^                    
    // `finally...{{^finally            
    // {                                
    //     `cursor^                     
    // }`}}^                            



try
{
    what
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
finally
{
    
}

try
{
    what_TYPED
} catch_TYPED
finally_TYPED b

a try
{
    what
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
finally
{
    
} b

a try
{
    what
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
finally
{
    
}


    //  -------------try_--------------- 
    // try                               
    // {                                 
    //     `wrapped^                     
    // }` `catch...^                     
    // `finally...{{^finally             
    // {                                 
    //     `cursor^                      
    // }`}}^                             



try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
finally
{
    
}

try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} catch_TYPED
finally_TYPEDb

a try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
finally
{
    
}b

a try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
catch (Exception e)
{
    /* handling */
}
finally
{
    
}


    //  -------------while---------------       
    // while (`condition^)`$WHILE_BRACKET_STL^{ 
    //     `cursor^                             
    // }                                        



while (condition) {
    
}

while (condition_TYPED) {
    
} b

a while (condition) {
    
} b

a while (condition) {
    
}


    //  -------------while0---------------       
    // do`$WHILE_BRACKET_STL^{                   
    //     `cursor^                              
    // }`$WHILE_BRACKET_STL^while (`condition^); 



do {
    
} while (false);

do {
    
} while (false); b

a do {
    
} while (false); b

a do {
    
} while (false);


    //  -------------while1---------------      
    // while (`condition^)`$WHILE_BRACKET_STL^{ 
    //     `cursor^                             
    // }                                        



while (true) {
    
}

while (true) {
    
} b

a while (true) {
    
} b

a while (true) {
    
}


    //  -------------whilenn---------------     
    // while (`condition^)`$WHILE_BRACKET_STL^{ 
    //     `cursor^                             
    // }                                        



while (null != var) {
    
}

while (null != var_TYPED) {
    
} b

a while (null != var) {
    
} b

a while (null != var) {
    
}


    //  -------------{_--------------- 
    // {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

