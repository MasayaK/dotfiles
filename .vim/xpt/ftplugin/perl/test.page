


    #  -------------"_--------------- 
    # "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    #  -------------'_--------------- 
    # '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    #  -------------(_--------------- 
    # (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    #  -------------<_--------------- 
    # <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    #  -------------[_--------------- 
    # [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    #  -------------`_--------------- 
    # \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    #  -------------Author--------------- 
    # `$author^                           



    drdr.xp

    drdr.xp b

    a drdr.xp b

    a drdr.xp


    #  -------------comment--------------- 
    # `$CS^ `cursor^                       



    # 
    #
    #  b
    #
    a #  b

    a # 


    #  -------------comment_--------------- 
    # `$CS^ `wrapped^                       



# WRAPPED_TEXT
WRAPPED_TEXT_line2

# WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2


    #  -------------commentBlock--------------- 
    # `$CS^ `cursor^                            
    # `$CS^                                     



    # 
    #
    #
    # 
    # b
    #
    a # 
    # b
    #
    a # 
    #
    #

    #  -------------commentDoc--------------- 
    # `$CS^                                   
    # `$CS^ `cursor^                          
    # `$CS^                                   



    #
    # 
    #
    #
    #
    # 
    # b
    #
    a #
    # 
    # b
    #
    a #
    # 
    #
    #

    #  -------------commentLine--------------- 
    # `$CS^ `cursor^                           



    # 
    #
    #  b
    #
    a #  b

    a # 


    #  -------------commentLine_--------------- 
    # `$CS^ `wrapped^                           



# WRAPPED_TEXT
WRAPPED_TEXT_line2

# WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2b

a # WRAPPED_TEXT
WRAPPED_TEXT_line2


    #  -------------do---------------           
    # do`$WHILE_BRACKET_STL^{                   
    #     `cursor^                              
    # }`$WHILE_BRACKET_STL^while (`condition^); 



    do {
        
    } while (condition);

    do {
        
    } while (condition_TYPED); b

    a do {
        
    } while (condition); b

    a do {
        
    } while (condition);


    #  -------------Email--------------- 
    # `$email^                           



    drdr.xp@gmail.com

    drdr.xp@gmail.com b

    a drdr.xp@gmail.com b

    a drdr.xp@gmail.com


    #  -------------eval--------------- 
    # eval`$IF_BRACKET_STL^{            
    #     `risky^                       
    # };                                
    # if ($@)`$IF_BRACKET_STL^{         
    #     `handle^                      
    # }                                 



    eval {
        risky
    };
    if ($@) {
        handle
    }

    eval {
        risky_TYPED
    };
    if ($@) {
        handle_TYPED
    } b

    a eval {
        risky
    };
    if ($@) {
        handle
    } b

    a eval {
        risky
    };
    if ($@) {
        handle
    }


    #  -------------eval_--------------- 
    # eval`$IF_BRACKET_STL^{             
    #     `wrapped^                      
    # };                                 
    # if ($@)`$IF_BRACKET_STL^{          
    #     `handle^                       
    # }                                  



eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle
}

eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle_TYPED
}b

a eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle
}b

a eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle
}


    #  -------------File--------------- 
    # `file()^                          



    test.page

    test.page b

    a test.page b

    a test.page


    #  -------------for---------------                                                                   
    # for ( `$FOR_SCOPE^`$VAR_PRE^`i^ = `0^; `$VAR_PRE^`i^ < `len^; ++`$VAR_PRE^`i^ )`$FOR_BRACKET_STL^{ 
    #     `cursor^                                                                                       
    # }                                                                                                  



    for ( my $i = 0; $i < len; ++$i ) {
        
    }

    for ( my $i_TYPED = 0_TYPED; $i_TYPED < len_TYPED; ++$i_TYPED ) {
        
    } b

    a for ( my $i = 0; $i < len; ++$i ) {
        
    } b

    a for ( my $i = 0; $i < len; ++$i ) {
        
    }


    #  -------------foreach---------------            
    # foreach my $`var^ (@`array^)`$FOR_BRACKET_STL^{ 
    #     `cursor^                                    
    # }                                               



    foreach my $var (@array) {
        
    }

    foreach my $var_TYPED (@array_TYPED) {
        
    } b

    a foreach my $var (@array) {
        
    } b

    a foreach my $var (@array) {
        
    }


    #  -------------forever--------------- 
    # for (;;) `body^                      



    for (;;) # void

    for (;;) body_TYPED b

    a for (;;) # void b

    a for (;;) # void


    #  -------------forkeys---------------                   
    # foreach my $`var^ ( keys @`array^ )`$FOR_BRACKET_STL^{ 
    #     `cursor^                                           
    # }                                                      



    foreach my $var ( keys @array ) {
        
    }

    foreach my $var_TYPED ( keys @array_TYPED ) {
        
    } b

    a foreach my $var ( keys @array ) {
        
    } b

    a foreach my $var ( keys @array ) {
        
    }


    #  -------------forr---------------                                                                     
    # for ( `$FOR_SCOPE^`$VAR_PRE^`i^ = `0^; `$VAR_PRE^`i^ >`=^ `end^; --`$VAR_PRE^`i^ )`$FOR_BRACKET_STL^{ 
    #     `cursor^                                                                                          
    # }                                                                                                     



    for ( my $i = 0; $i >= end; --$i ) {
        
    }

    for ( my $i_TYPED = 0_TYPED; $i_TYPED >_TYPED end_TYPED; --$i_TYPED ) {
        
    } b

    a for ( my $i = 0; $i >= end; --$i ) {
        
    } b

    a for ( my $i = 0; $i >= end; --$i ) {
        
    }


    #  -------------forvalues---------------                   
    # foreach my $`var^ ( values @`array^ )`$FOR_BRACKET_STL^{ 
    #     `cursor^                                             
    # }                                                        



    foreach my $var ( values @array ) {
        
    }

    foreach my $var_TYPED ( values @array_TYPED ) {
        
    } b

    a foreach my $var ( values @array ) {
        
    } b

    a foreach my $var ( values @array ) {
        
    }


    #  -------------if---------------                             
    # if ( `cond^ )`$IF_BRACKET_STL^{                             
    #     `job^                                                   
    # }`                                                          
    # `...^`$ELSE_BRACKET_STL^elsif ( `cond2^ )`$IF_BRACKET_STL^{ 
    #     `job^                                                   
    # }`                                                          
    # `...^`                                                      
    # `else...{{^`$ELSE_BRACKET_STL^else`$IF_BRACKET_STL^{        
    #     `cursor^                                                
    # }`}}^                                                       



    if ( cond ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    else {
        
    }

    if ( cond_TYPED ) {
        job_TYPED
    }
    _TYPED
    else_TYPED b

    a if ( cond ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    else {
        
    } b

    a if ( cond ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    elsif ( cond2 ) {
        # job
    }
    else {
        
    }


    #  -------------if_---------------                            
    # if ( `cond^ )`$IF_BRACKET_STL^{                             
    #     `wrapped^                                               
    # }`                                                          
    # `...^`$ELSE_BRACKET_STL^elsif ( `cond2^ )`$IF_BRACKET_STL^{ 
    #     `job^                                                   
    # }`                                                          
    # `...^`                                                      
    # `else...{{^`$ELSE_BRACKET_STL^else`$IF_BRACKET_STL^{        
    #     `cursor^                                                
    # }`}}^                                                       



if ( cond ) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
elsif ( cond2 ) {
    # job
}
elsif ( cond2 ) {
    # job
}
elsif ( cond2 ) {
    # job
}
else {
    
}

if ( cond_TYPED ) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
_TYPED
else_TYPEDb

a if ( cond ) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
elsif ( cond2 ) {
    # job
}
elsif ( cond2 ) {
    # job
}
elsif ( cond2 ) {
    # job
}
else {
    
}b

a if ( cond ) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
elsif ( cond2 ) {
    # job
}
elsif ( cond2 ) {
    # job
}
elsif ( cond2 ) {
    # job
}
else {
    
}


    #  -------------package---------------   
    # package `className^;                   
    #                                        
    # use base qw(`parent^);                 
    #                                        
    # sub new`$FUNC_BRACKET_STL^{            
    #     my $class = shift;                 
    #     $class = ref $class if ref $class; 
    #     my $self = bless {}, $class;       
    #     $self;                             
    # }                                      
    #                                        
    # 1;                                     



    package className;
    
    use base qw(parent);
    
    sub new {
        my $class = shift;
        $class = ref $class if ref $class;
        my $self = bless {}, $class;
        $self;
    }
    
    1;
    

    package className_TYPED;
    
    use base qw(parent_TYPED);
    
    sub new {
        my $class = shift;
        $class = ref $class if ref $class;
        my $self = bless {}, $class;
        $self;
    }
    
    1;
     b

     a package className;
     
     use base qw(parent);
     
     sub new {
         my $class = shift;
         $class = ref $class if ref $class;
         my $self = bless {}, $class;
         $self;
     }
     
     1;
      b

      a package className;
      
      use base qw(parent);
      
      sub new {
          my $class = shift;
          $class = ref $class if ref $class;
          my $self = bless {}, $class;
          $self;
      }
      
      1;
      


    #  -------------perl--------------- 
    # _CMT_!/usr/bin/env perl           



    #!/usr/bin/env perl
    

    #!/usr/bin/env perl
     b

     a #!/usr/bin/env perl
      b

      a #!/usr/bin/env perl
      


    #  -------------sub---------------   
    # sub `fun_name^`$FUNC_BRACKET_STL^{ 
    #     `cursor^                       
    # }                                  



    sub fun_name {
        
    }

    sub fun_name_TYPED {
        
    } b

    a sub fun_name {
        
    } b

    a sub fun_name {
        
    }


    #  -------------try--------------- 
    # eval`$IF_BRACKET_STL^{           
    #     `risky^                      
    # };                               
    # if ($@)`$IF_BRACKET_STL^{        
    #     `handle^                     
    # }                                



    eval {
        risky
    };
    if ($@) {
        handle
    }

    eval {
        risky_TYPED
    };
    if ($@) {
        handle_TYPED
    } b

    a eval {
        risky
    };
    if ($@) {
        handle
    } b

    a eval {
        risky
    };
    if ($@) {
        handle
    }


    #  -------------try_--------------- 
    # eval`$IF_BRACKET_STL^{            
    #     `wrapped^                     
    # };                                
    # if ($@)`$IF_BRACKET_STL^{         
    #     `handle^                      
    # }                                 



eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle
}

eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle_TYPED
}b

a eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle
}b

a eval {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
};
if ($@) {
    handle
}


    #  -------------unless--------------- 
    # unless (`cond^)`$IF_BRACKET_STL^{   
    #     `cursor^                        
    # }                                   



    unless (cond) {
        
    }

    unless (cond_TYPED) {
        
    } b

    a unless (cond) {
        
    } b

    a unless (cond) {
        
    }


    #  -------------while---------------       
    # while (`condition^)`$WHILE_BRACKET_STL^{ 
    #     `cursor^                             
    # }                                        



    while (condition) {
        
    }

    while (condition_TYPED) {
        
    } b

    a while (condition) {
        
    } b

    a while (condition) {
        
    }


    #  -------------while0---------------       
    # do`$WHILE_BRACKET_STL^{                   
    #     `cursor^                              
    # }`$WHILE_BRACKET_STL^while (`condition^); 



    do {
        
    } while (0);

    do {
        
    } while (0); b

    a do {
        
    } while (0); b

    a do {
        
    } while (0);


    #  -------------while1---------------      
    # while (`condition^)`$WHILE_BRACKET_STL^{ 
    #     `cursor^                             
    # }                                        



    while (1) {
        
    }

    while (1) {
        
    } b

    a while (1) {
        
    } b

    a while (1) {
        
    }


    #  -------------whileeach---------------                               
    # while ( ( $`key^, $`val^ ) = each( %`array^ ) )`$WHILE_BRACKET_STL^{ 
    #     `cursor^                                                         
    # }                                                                    



    while ( ( $key, $val ) = each( %array ) ) {
        
    }

    while ( ( $key_TYPED, $val_TYPED ) = each( %array_TYPED ) ) {
        
    } b

    a while ( ( $key, $val ) = each( %array ) ) {
        
    } b

    a while ( ( $key, $val ) = each( %array ) ) {
        
    }


    #  -------------whileline---------------                        
    # while ( defined( $`line^ = <`STDIN^> ) )`$WHILE_BRACKET_STL^{ 
    #     `cursor^                                                  
    # }                                                             



    while ( defined( $line = <STDIN> ) ) {
        
    }

    while ( defined( $line_TYPED = <STDIN_TYPED> ) ) {
        
    } b

    a while ( defined( $line = <STDIN> ) ) {
        
    } b

    a while ( defined( $line = <STDIN> ) ) {
        
    }


    #  -------------xforeach--------------- 
    # `expr^ foreach @`array^;              



    expr foreach @array;

    expr_TYPED foreach @array_TYPED; b

    a expr foreach @array; b

    a expr foreach @array;


    #  -------------xif--------------- 
    # `expr^ if `cond^;                



    expr if cond;

    expr_TYPED if cond_TYPED; b

    a expr if cond; b

    a expr if cond;


    #  -------------xunless--------------- 
    # `expr^ unless `cond^;                



    expr unless cond;

    expr_TYPED unless cond_TYPED; b

    a expr unless cond; b

    a expr unless cond;


    #  -------------xwhile--------------- 
    # `expr^ while `cond^;                



    expr while cond;

    expr_TYPED while cond_TYPED; b

    a expr while cond; b

    a expr while cond;


    #  -------------{_--------------- 
    # {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

