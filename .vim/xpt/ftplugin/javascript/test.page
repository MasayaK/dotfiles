


    //  -------------"_--------------- 
    // "`wrapped^"                     



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    //  -------------'_--------------- 
    // '`wrapped^'                     



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    //  -------------(_--------------- 
    // (`wrapped^)                     



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    //  -------------<_--------------- 
    // <`wrapped^>                     



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>b

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    //  -------------[_--------------- 
    // [`wrapped^]                     



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    //  -------------`_--------------- 
    // \``wrapped^\`                   



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    //  -------------asoe--------------- 
    // assertObjectEquals(`mess^         
    //                   , `arr^         
    //                   , `expr^)       



    assertObjectEquals(mess
                      , arr
                      , expr)

                  assertObjectEquals(mess_TYPED
                                    , arr_TYPED
                                    , expr_TYPED) b

                                a assertObjectEquals(mess
                                                  , arr
                                                  , expr) b

                                              a assertObjectEquals(mess
                                                                , arr
                                                                , expr)


    //  -------------Author--------------- 
    // `$author^                           



    drdr.xp

    drdr.xp b

    a drdr.xp b

    a drdr.xp


    //  -------------bench--------------- 
    // var t0 = new Date().getTime();     
    // for (var i = 0; i < `times^; ++i){ 
    //     `job^                          
    // }                                  
    // var t1 = new Date().getTime();     
    // for (var i = 0; i < `times^; ++i){ 
    //     `jobn^                         
    // }                                  
    // var t2 = new Date().getTime();     
    // `log^(t1-t0, t2-t1);               



    var t0 = new Date().getTime();
    for (var i = 0; i < times; ++i){
        /* void */;
    }
    var t1 = new Date().getTime();
    for (var i = 0; i < times; ++i){
        /* void */;
    }
    var t2 = new Date().getTime();
    console.log(t1-t0, t2-t1);
    

    var t0 = new Date().getTime();
    for (var i = 0; i < times_TYPED; ++i){
        job_TYPED
    }
    var t1 = new Date().getTime();
    for (var i = 0; i < times_TYPED; ++i){
        jobn_TYPED
    }
    var t2 = new Date().getTime();
    log_TYPED(t1-t0, t2-t1);
     b

     a var t0 = new Date().getTime();
     for (var i = 0; i < times; ++i){
         /* void */;
     }
     var t1 = new Date().getTime();
     for (var i = 0; i < times; ++i){
         /* void */;
     }
     var t2 = new Date().getTime();
     console.log(t1-t0, t2-t1);
      b

      a var t0 = new Date().getTime();
      for (var i = 0; i < times; ++i){
          /* void */;
      }
      var t1 = new Date().getTime();
      for (var i = 0; i < times; ++i){
          /* void */;
      }
      var t2 = new Date().getTime();
      console.log(t1-t0, t2-t1);
      


    //  -------------bench_--------------- 
    // var t0 = new Date().getTime();      
    // for (var i = 0; i < `times^; ++i){  
    //     `wrapped^                       
    // }                                   
    // var t1 = new Date().getTime();      
    // `log^(t1-t0);                       



var t0 = new Date().getTime();
for (var i = 0; i < times; ++i){
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
var t1 = new Date().getTime();
console.log(t1-t0);

var t0 = new Date().getTime();
for (var i = 0; i < times_TYPED; ++i){
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
var t1 = new Date().getTime();
log_TYPED(t1-t0);b

a var t0 = new Date().getTime();
for (var i = 0; i < times; ++i){
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
var t1 = new Date().getTime();
console.log(t1-t0);b

a var t0 = new Date().getTime();
for (var i = 0; i < times; ++i){
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
var t1 = new Date().getTime();
console.log(t1-t0);


    //  -------------cmt--------------- 
    // /**                              
    // * @author : `author^ | `email^   
    // * @description                   
    // *     `cursor^                   
    // * @return {`Object^} `desc^      
    // */                               



    /**
    * @author : drdr.xp | drdr.xp@gmail.com
    * @description
    *     
    * @return {Object} desc
    */

    /**
    * @author : author_TYPED | email_TYPED
    * @description
    *     
    * @return {Object_TYPED} desc_TYPED
    */ b

    a /**
    * @author : drdr.xp | drdr.xp@gmail.com
    * @description
    *     
    * @return {Object} desc
    */ b

    a /**
    * @author : drdr.xp | drdr.xp@gmail.com
    * @description
    *     
    * @return {Object} desc
    */


    //  -------------comment--------------- 
    // `$CL^ `what^ `$CR^                   



    /* what */

    /* what_TYPED */ b

    a /* what */ b

    a /* what */


    //  -------------comment_--------------- 
    // `$CL^ `wrapped^ `$CR^                 



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    //  -------------commentBlock--------------- 
    // `$CL^                                     
    //  `$CM^ `cursor^                           
    //  `$CR^                                    



    /* 
     * 
     */

    /* 
     * 
     */ b

    a /* 
     * 
     */ b

    a /* 
     * 
     */


    //  -------------commentBlock_--------------- 
    // `$CL^                                      
    //  `$CM^ `wrapped^                           
    //  `$CR^                                     



/* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    //  -------------commentDoc--------------- 
    // `$CL^`$CM^                              
    //  `$CM^ `cursor^                         
    //  `$CR^                                  



    /** 
     * 
     */

    /** 
     * 
     */ b

    a /** 
     * 
     */ b

    a /** 
     * 
     */


    //  -------------commentDoc_--------------- 
    // `$CL^`$CM^                               
    //  `$CM^ `wrapped^                         
    //  `$CR^                                   



/** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */b

a /** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    //  -------------commentLine--------------- 
    // `$CL^ `what^ `$CR^                       



    /* what */

    /* what_TYPED */ b

    a /* what */ b

    a /* what */


    //  -------------commentLine_--------------- 
    // `$CL^ `wrapped^ `$CR^                     



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    //  -------------cpr--------------- 
    // @param {`Object^} `name^ `desc^  



    @param {Object} name desc

    @param {Object_TYPED} name_TYPED desc_TYPED b

    a @param {Object} name desc b

    a @param {Object} name desc


    //  -------------elif---------------       
    // else if (`condition^)`$IF_BRACKET_STL^{ 
    //     `job^                               
    // }                                       



    else if (condition) {
        /* void */;
    }

    else if (condition_TYPED) {
        job_TYPED
    } b

    a else if (condition) {
        /* void */;
    } b

    a else if (condition) {
        /* void */;
    }


    //  -------------else--------------- 
    // else`$IF_BRACKET_STL^{            
    //     `cursor^                      
    // }                                 



    else {
        
    }

    else {
        
    } b

    a else {
        
    } b

    a else {
        
    }


    //  -------------else_--------------- 
    // else`$IF_BRACKET_STL^{             
    //     `wrapped^                      
    // }                                  



else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    //  -------------Email--------------- 
    // `$email^                           



    drdr.xp@gmail.com

    drdr.xp@gmail.com b

    a drdr.xp@gmail.com b

    a drdr.xp@gmail.com


    //  -------------fcmt---------------                                      
    // /**-------------------------_CMT_/ `sum^ \\\--------------------------- 
    //  *                                                                     
    //  * <b>`function^</b>                                                   
    //  * @version : `1.0^                                                    
    //  * @since : `date^                                                     
    //  *                                                                     
    //  * @description :                                                      
    //  *   `cursor^                                                          
    //  * @usage :                                                            
    //  *                                                                     
    //  * @author : `$author^ | `$email^                                      
    //  * @copyright :                                                        
    //  * @TODO :                                                             
    //  *                                                                     
    //  *--------------------------\\\ `sum^ _CMT_/---------------------------*/ 



    /**-------------------------/// sum \\\---------------------------
     *
     * <b>function</b>
     * @version : 1.0
     * @since : date
     * 
     * @description :
     *   
     * @usage : 
     * 
     * @author : drdr.xp | drdr.xp@gmail.com
     * @copyright : 
     * @TODO : 
     * 
     *--------------------------\\\ sum ///---------------------------*/

    /**-------------------------/// sum_TYPED \\\---------------------------
     *
     * <b>function_TYPED</b>
     * @version : 10_TYPED
     * @since : date_TYPED
     * 
     * @description :
     *   
     * @usage : 
     * 
     * @author : drdr.xp | drdr.xp@gmail.com
     * @copyright : 
     * @TODO : 
     * 
     *--------------------------\\\ sum_TYPED ///---------------------------*/ b

    a /**-------------------------/// sum \\\---------------------------
     *
     * <b>function</b>
     * @version : 1.0
     * @since : date
     * 
     * @description :
     *   
     * @usage : 
     * 
     * @author : drdr.xp | drdr.xp@gmail.com
     * @copyright : 
     * @TODO : 
     * 
     *--------------------------\\\ sum ///---------------------------*/ b

    a /**-------------------------/// sum \\\---------------------------
     *
     * <b>function</b>
     * @version : 1.0
     * @since : date
     * 
     * @description :
     *   
     * @usage : 
     * 
     * @author : drdr.xp | drdr.xp@gmail.com
     * @copyright : 
     * @TODO : 
     * 
     *--------------------------\\\ sum ///---------------------------*/


    //  -------------File--------------- 
    // `file()^                          



    test.page

    test.page b

    a test.page b

    a test.page


    //  -------------for---------------                                                                   
    // for ( `$FOR_SCOPE^`$VAR_PRE^`i^ = `0^; `$VAR_PRE^`i^ < `len^; ++`$VAR_PRE^`i^ )`$FOR_BRACKET_STL^{ 
    //     `cursor^                                                                                       
    // }                                                                                                  



    for ( var i = 0; i < len; ++i ) {
        
    }

    for ( var i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED ) {
        
    } b

    a for ( var i = 0; i < len; ++i ) {
        
    } b

    a for ( var i = 0; i < len; ++i ) {
        
    }


    //  -------------forever--------------- 
    // for (;;) `body^                      



    for (;;) /* void */

        for (;;) body_TYPED b

    a for (;;) /* void */ b

    a for (;;) /* void */


    //  -------------forin---------------            
    // for ( var `i^ in `array^ )`$FOR_BRACKET_STL^{ 
    //     var `e^ = `array^[`i^];                   
    //     `cursor^                                  
    // }                                             



    for ( var i in array ) {
        var e = array[i];
        
    }

    for ( var i_TYPED in array_TYPED ) {
        var e_TYPED = array_TYPED[i_TYPED];
        
    } b

    a for ( var i in array ) {
        var e = array[i];
        
    } b

    a for ( var i in array ) {
        var e = array[i];
        
    }


    //  -------------fornn---------------                                                                             
    // for ( `$FOR_SCOPE^`$VAR_PRE^`ptr^ = `init^; `$NULL^ != `$VAR_PRE^`ptr^; `$VAR_PRE^`ptrOp^ )`$FOR_BRACKET_STL^{ 
    //     `cursor^                                                                                                   
    // }                                                                                                              



    for ( var ptr = init; null != ptr; ptr ) {
        
    }

    for ( var ptr_TYPED = init_TYPED; null != ptr_TYPED; ptrOp_TYPED ) {
        
    } b

    a for ( var ptr = init; null != ptr; ptr ) {
        
    } b

    a for ( var ptr = init; null != ptr; ptr ) {
        
    }


    //  -------------forr---------------                                                                     
    // for ( `$FOR_SCOPE^`$VAR_PRE^`i^ = `0^; `$VAR_PRE^`i^ >`=^ `end^; --`$VAR_PRE^`i^ )`$FOR_BRACKET_STL^{ 
    //     `cursor^                                                                                          
    // }                                                                                                     



    for ( var i = 0; i >= end; --i ) {
        
    }

    for ( var i_TYPED = 0_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED ) {
        
    } b

    a for ( var i = 0; i >= end; --i ) {
        
    } b

    a for ( var i = 0; i >= end; --i ) {
        
    }


    //  -------------fun--------------- 
    // function` `name^ (`arg*^) {      
    //     `cursor^                     
    // }                                



    function name () {
        
    }

    function name_TYPED (arg_TYPED, arg_TYPED, arg_TYPED) {
        
    } b

    a function name () {
        
    } b

    a function name () {
        
    }


    //  -------------fun_--------------- 
    // function` `name^ (`param^) {      
    //     `wrapped^                     
    //     return;                       
    // }                                 



function name (param) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    return;
}

function name_TYPED (param_TYPED) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    return;
}b

a function name (param) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    return;
}b

a function name (param) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    return;
}


    //  -------------if---------------                     
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



    if (condition) { 
        /* void */;
    }
    else {
        
    }

    if (condition_TYPED) { 
        job_TYPED
    } else_TYPED b

    a if (condition) { 
        /* void */;
    }
    else {
        
    } b

    a if (condition) { 
        /* void */;
    }
    else {
        
    }


    //  -------------if0---------------                    
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



    if (0 == var) { 
        /* void */;
    }
    else {
        
    }

    if (0 == var_TYPED) { 
        job_TYPED
    } else_TYPED b

    a if (0 == var) { 
        /* void */;
    }
    else {
        
    } b

    a if (0 == var) { 
        /* void */;
    }
    else {
        
    }


    //  -------------if_---------------   
    // if (`condition^)`$IF_BRACKET_STL^{ 
    //     `wrapped^                      
    // }                                  



if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if (condition_TYPED) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}b

a if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    //  -------------ifee---------------  
    // if (`condition^)`$IF_BRACKET_STL^{ 
    //     `job^                          
    // }` `else_if...^                    



    if (condition) {
        /* void */;
    } else if (condition) {
        /* void */;
    } else if (condition) {
        /* void */;
    } else if (condition) {
        /* void */;
    }

    if (condition_TYPED) {
        job_TYPED
    } else_if_TYPED b

    a if (condition) {
        /* void */;
    } else if (condition ) {
        /* void */;
    } else if (condition ) {
        /* void */;
    } else if (condition ) {
        /* void */;
    } b

    a if (condition) {
        /* void */;
    } else if (condition) {
        /* void */;
    } else if (condition) {
        /* void */;
    } else if (condition) {
        /* void */;
    }


    //  -------------ifn---------------                    
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



    if (null == var) { 
        /* void */;
    }
    else {
        
    }

    if (null == var_TYPED) { 
        job_TYPED
    } else_TYPED b

    a if (null == var) { 
        /* void */;
    }
    else {
        
    } b

    a if (null == var) { 
        /* void */;
    }
    else {
        
    }


    //  -------------ifn0---------------                   
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



    if (0 != var) { 
        /* void */;
    }
    else {
        
    }

    if (0 != var_TYPED) { 
        job_TYPED
    } else_TYPED b

    a if (0 != var) { 
        /* void */;
    }
    else {
        
    } b

    a if (0 != var) { 
        /* void */;
    }
    else {
        
    }


    //  -------------ifnn---------------                   
    // if (`condition^)`$IF_BRACKET_STL^{                  
    //     `job^                                           
    // }` `else...{{^`$ELSE_BRACKET_STL^`Include:else^`}}^ 



    if (null != var) { 
        /* void */;
    }
    else {
        
    }

    if (null != var_TYPED) { 
        job_TYPED
    } else_TYPED b

    a if (null != var) { 
        /* void */;
    }
    else {
        
    } b

    a if (null != var) { 
        /* void */;
    }
    else {
        
    }


    //  -------------new---------------          
    // var `instant^ = new `Constructor^(`arg*^) 



    var instant = new Constructor()

    var instant_TYPED = new Constructor_TYPED(arg_TYPED, arg_TYPED, arg_TYPED) b

    a var instant = new Constructor() b

    a var instant = new Constructor()


    //  -------------proto---------------                                
    // `Class^.prototype.`method^ = function(`arg*^)`$FUNC_BRACKET_STL^{ 
    // `cursor^                                                          
    // }                                                                 



    Class.prototype.method = function() {
    
    }

    Class_TYPED.prototype.method_TYPED = function(arg_TYPED, arg_TYPED, arg_TYPED) {
    
    } b

    a Class.prototype.method = function() {
    
    } b

    a Class.prototype.method = function() {
    
    }


    //  -------------setTimeout---------------          
    // setTimeout(function() { `job^ }, `milliseconds^) 



    setTimeout(function() { /* void */; }, milliseconds)

    setTimeout(function() { job_TYPED }, milliseconds_TYPED) b

    a setTimeout(function() { /* void */; }, milliseconds) b

    a setTimeout(function() { /* void */; }, milliseconds)


    //  -------------switch--------------- 
    // switch (`var^)`$IF_BRACKET_STL^{    
    //     case `constant^ :               
    //         `job^                       
    //         break;                      
    // `                                   
    //     `case...`                       
    // ^`                                  
    //     `default...^                    
    // }                                   



    switch (var) {
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        default:
            
    }

    switch (var_TYPED) {
        case constant_TYPED :
            job_TYPED
            break;
    
        case_TYPED
    
        default_TYPED
    } b

    a switch (var) {
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        default:
            
    } b

    a switch (var) {
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        default:
            
    }


    //  -------------try--------------- 
    // try`$IF_BRACKET_STL^{            
    //     `job^                        
    // }                                
    // catch (`err^)`$IF_BRACKET_STL^{  
    //     `dealError^                  
    // }`...^                           
    // catch (`err^)`$IF_BRACKET_STL^{  
    //     `dealError^                  
    // }`...^`                          
    // `finally...{{^                   
    // finally`$IF_BRACKET_STL^{        
    //     `cursor^                     
    // }`}}^                            



    try {
        /* void */;
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    finally {
        
    }

    try {
        job_TYPED
    }
    catch (err_TYPED) {
        dealError_TYPED
    }_TYPED
    finally_TYPED b

    a try {
        /* void */;
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    finally {
        
    } b

    a try {
        /* void */;
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    catch (err) {
        /* error handling */
    }
    finally {
        
    }


    //  -------------try_--------------- 
    // try`$IF_BRACKET_STL^{             
    //     `wrapped^                     
    // }                                 
    // catch (`err^)`$IF_BRACKET_STL^{   
    //     `dealError^                   
    // }`...^                            
    // catch (`err^)`$IF_BRACKET_STL^{   
    //     `dealError^                   
    // }`...^`                           
    // `finally...{{^                    
    // finally`$IF_BRACKET_STL^{         
    //     `cursor^                      
    // }`}}^                             



try {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
finally {
    
}

try {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (err_TYPED) {
    dealError_TYPED
}_TYPED
finally_TYPEDb

a try {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
finally {
    
}b

a try {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
catch (err) {
    /* error handling */
}
finally {
    
}


    //  -------------{_--------------- 
    // {`wrapped^}                     



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

