


    /*  -------------"--------------- */
/* "`wrapped^"                    */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2" b

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------'--------------- */
/* '`wrapped^'                    */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(--------------- */
/* (`wrapped^)                    */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2) b

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<--------------- */
/* <`tag^` `...^>                 */
/*     `cursor^                   */
/* </`tag^>                       */



<tag name="val" name="val">
    
</tag>

<tag_TYPED _TYPED>
    
</tag_TYPED> b

a <tag name="val" name="val">
    
</tag> b

a <tag name="val" name="val">
    
</tag>


    /*  -------------<_--------------- */
/* <`span^>`wrapped^</`span^>      */



<span>WRAPPED_TEXT
WRAPPED_TEXT_line2</span>

<span_TYPED>WRAPPED_TEXT
WRAPPED_TEXT_line2</span_TYPED> b

a <span>WRAPPED_TEXT
WRAPPED_TEXT_line2</span> b

a <span>WRAPPED_TEXT
WRAPPED_TEXT_line2</span>


    /*  -------------Author--------------- */
/* `$author^                           */



drdr.xp

drdr.xp b

a drdr.xp b

a drdr.xp


    /*  -------------CDATA_--------------- */
/* <![CDATA[                           */
/* `cursor^                            */
/* ]]>                                 */



<![CDATA[

]]>

<![CDATA[

]]> b

a <![CDATA[

]]> b

a <![CDATA[

]]>


    /*  -------------Email--------------- */
/* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com b

a drdr.xp@gmail.com b

a drdr.xp@gmail.com


    /*  -------------File--------------- */
/* `file()^                          */



test.page

test.page b

a test.page b

a test.page


    /*  -------------[--------------- */
/* [`wrapped^]                    */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2] b

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`--------------- */
/* \``wrapped^\`                  */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2` b

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------a--------------- */
/* <a href="`href^">`cursor^</a>  */



<a href="href"></a>

<a href="href_TYPED"></a> b

a <a href="href"></a> b

a <a href="href"></a>


    /*  -------------a_--------------- */
/* <a href="">`wrapped^</a>        */



<a href="">WRAPPED_TEXT
WRAPPED_TEXT_line2</a>

<a href="">WRAPPED_TEXT
WRAPPED_TEXT_line2</a> b

a <a href="">WRAPPED_TEXT
WRAPPED_TEXT_line2</a> b

a <a href="">WRAPPED_TEXT
WRAPPED_TEXT_line2</a>


    /*  -------------br--------------- */
/* <br />                          */



<br />

<br /> b

a <br /> b

a <br />


    /*  -------------cb--------------- */
/* `$CL^                           */
/*  `$CM^ `cursor^                 */
/*  `$CR^                          */



/*
 * 
 */

/*
 * 
 */ b

a /*
 * 
 */ b

a /*
 * 
 */


    /*  -------------cc--------------- */
/* `$CL^ `cursor^ `$CR^            */



/*  */

/*  */ b

a /*  */ b

a /*  */


    /*  -------------cc_--------------- */
/* `$CL^ `wrapped^ `$CR^            */



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    /*  -------------cd--------------- */
/* `$CL^`$CM^                      */
/*  `$CM^ `cursor^                 */
/*  `$CR^                          */



/**
 * 
 */

/**
 * 
 */ b

a /**
 * 
 */ b

a /**
 * 
 */


    /*  -------------cl--------------- */
/* `$CL^ `cursor^ `$CR^            */



/*  */

/*  */ b

a /*  */ b

a /*  */


    /*  -------------class---------------                     */
/* class `className^`$FUNC_BRACKET_STL^{                  */
/*     function __construct( `args^ )`$FUNC_BRACKET_STL^{ */
/*         `cursor^                                       */
/*     }                                                  */
/* }                                                      */



class className {
    function __construct( args ) {
        
    }
}

class className_TYPED {
    function __construct( args_TYPED ) {
        
    }
} b

a class className {
    function __construct( args ) {
        
    }
} b

a class className {
    function __construct( args ) {
        
    }
}


    /*  -------------comment--------------- */
/* `$CL^ `what^ `$CR^                   */



/* what */

/* what_TYPED */ b

a /* what */ b

a /* what */


    /*  -------------commentBlock--------------- */
/* `$CL^                                     */
/*  `$CM^ `cursor^                           */
/*  `$CR^                                    */



/* 
 * 
 */

/* 
 * 
 */ b

a /* 
 * 
 */ b

a /* 
 * 
 */


    /*  -------------commentBlock_--------------- */
/* `$CL^                                      */
/*  `$CM^ `wrapped^                           */
/*  `$CR^                                     */



/* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */ b

a /* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */ b

a /* 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    /*  -------------commentDoc--------------- */
/* `$CL^`$CM^                              */
/*  `$CM^ `cursor^                         */
/*  `$CR^                                  */



/** 
 * 
 */

/** 
 * 
 */ b

a /** 
 * 
 */ b

a /** 
 * 
 */


    /*  -------------commentDoc_--------------- */
/* `$CL^`$CM^                               */
/*  `$CM^ `wrapped^                         */
/*  `$CR^                                   */



/** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */

/** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */ b

a /** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */ b

a /** 
 * WRAPPED_TEXT
 WRAPPED_TEXT_line2
 */


    /*  -------------commentLine--------------- */
/* `$CL^ `what^ `$CR^                       */



/* what */

/* what_TYPED */ b

a /* what */ b

a /* what */


    /*  -------------commentLine_--------------- */
/* `$CL^ `wrapped^ `$CR^                     */



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    /*  -------------comment_--------------- */
/* `$CL^ `wrapped^ `$CR^                 */



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    /*  -------------div--------------- */
/* <div`^>`cursor^</div>            */



<div></div>

<div_TYPED></div> b

a <div></div> b

a <div></div>


    /*  -------------div_--------------- */
/* <div>`wrapped^</div>              */



<div>WRAPPED_TEXT
WRAPPED_TEXT_line2</div>

<div>WRAPPED_TEXT
WRAPPED_TEXT_line2</div> b

a <div>WRAPPED_TEXT
WRAPPED_TEXT_line2</div> b

a <div>WRAPPED_TEXT
WRAPPED_TEXT_line2</div>


    /*  -------------do---------------           */
/* do`$WHILE_BRACKET_STL^{                   */
/*     `cursor^                              */
/* }`$WHILE_BRACKET_STL^while (`condition^); */



do {
    
} while (condition);

do {
    
} while (condition_TYPED); b

a do {
    
} while (condition); b

a do {
    
} while (condition);


    /*  -------------doctype--------------- */
/* <!DOCTYPE html PUBLIC `doctype^>     */



<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> b

a <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> b

a <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">


    /*  -------------else--------------- */
/* else`$IF_BRACKET_STL^{            */
/*     `cursor^                      */
/* }                                 */



else {
    
}

else {
    
} b

a else {
    
} b

a else {
    
}


    /*  -------------else_--------------- */
/* else`$IF_BRACKET_STL^{             */
/*     `wrapped^                      */
/* }                                  */



else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

a else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

a else {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------for---------------                                                                   */
/* for ( `$FOR_SCOPE^`$VAR_PRE^`i^ = `0^; `$VAR_PRE^`i^ < `len^; ++`$VAR_PRE^`i^ )`$FOR_BRACKET_STL^{ */
/*     `cursor^                                                                                       */
/* }                                                                                                  */



for ( $i = 0; $i < len; ++$i ) {
    
}

for ( $i_TYPED = 0_TYPED; $i_TYPED < len_TYPED; ++$i_TYPED ) {
    
} b

a for ( $i = 0; $i < len; ++$i ) {
    
} b

a for ( $i = 0; $i < len; ++$i ) {
    
}


    /*  -------------foreach---------------               */
/* foreach ($`var^ as `container^)`$FOR_BRACKET_STL^{ */
/*     `cursor^                                       */
/* }                                                  */



foreach ($var as container) {
    
}

foreach ($var_TYPED as container_TYPED) {
    
} b

a foreach ($var as container) {
    
} b

a foreach ($var as container) {
    
}


    /*  -------------forever--------------- */
/* for (;;) `body^                      */



for (;;) /* void */

for (;;) body_TYPED b

a for (;;) /* void */ b

a for (;;) /* void */


    /*  -------------fornn---------------                                                                             */
/* for ( `$FOR_SCOPE^`$VAR_PRE^`ptr^ = `init^; `$NULL^ != `$VAR_PRE^`ptr^; `$VAR_PRE^`ptrOp^ )`$FOR_BRACKET_STL^{ */
/*     `cursor^                                                                                                   */
/* }                                                                                                              */



for ( $ptr = init; null != $ptr; $ptr ) {
    
}

for ( $ptr_TYPED = init_TYPED; null != $ptr_TYPED; $ptrOp_TYPED ) {
    
} b

a for ( $ptr = init; null != $ptr; $ptr ) {
    
} b

a for ( $ptr = init; null != $ptr; $ptr ) {
    
}


    /*  -------------forr---------------                                                                     */
/* for ( `$FOR_SCOPE^`$VAR_PRE^`i^ = `0^; `$VAR_PRE^`i^ >`=^ `end^; --`$VAR_PRE^`i^ )`$FOR_BRACKET_STL^{ */
/*     `cursor^                                                                                          */
/* }                                                                                                     */



for ( $i = 0; $i >= end; --$i ) {
    
}

for ( $i_TYPED = 0_TYPED; $i_TYPED >_TYPED end_TYPED; --$i_TYPED ) {
    
} b

a for ( $i = 0; $i >= end; --$i ) {
    
} b

a for ( $i = 0; $i >= end; --$i ) {
    
}


    /*  -------------fun---------------                     */
/* function `funName^(` `params` ^)`$FUNC_BRACKET_STL^{ */
/*     `cursor^                                         */
/* }                                                    */



function funName() {
    
}

function funName_TYPED( params_TYPED ) {
    
} b

a function funName() {
    
} b

a function funName() {
    
}


    /*  -------------h--------------- */
/* <h`n^>`cursor^</h`n^>          */



<h1></h1>

<hn_TYPED></hn_TYPED> b

a <h1></h1> b

a <h1></h1>


    /*  -------------h_--------------- */
/* <h`n^>`wrapped^</h`n^>          */



<h1>WRAPPED_TEXT
WRAPPED_TEXT_line2</h1>

<hn_TYPED>WRAPPED_TEXT
WRAPPED_TEXT_line2</hn_TYPED> b

a <h1>WRAPPED_TEXT
WRAPPED_TEXT_line2</h1> b

a <h1>WRAPPED_TEXT
WRAPPED_TEXT_line2</h1>


    /*  -------------html---------------                                                                                         */
/* <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> */
/* <html>                                                                                                                    */
/*   <head>                                                                                                                  */
/*     <meta http-equiv="Content-Type" content="text/html; charset=`encoding^utf-8^"/>                                       */
/*     <link rel="stylesheet" type="text/css" href="" />                                                                     */
/*     <style></style>                                                                                                       */
/*     <title>`title^E('%:r')^</title>                                                                                       */
/*     <script language="javascript" type="text/javascript">                                                                 */
/*       <!-- -->                                                                                                            */
/*     </script>                                                                                                             */
/*   </head>                                                                                                                 */
/*   <body>                                                                                                                  */
/*     `cursor^                                                                                                              */
/*   </body>                                                                                                                 */
/* </html>                                                                                                                   */



<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <link rel="stylesheet" type="text/css" href="" />
    <style></style>
    <title>/home/xp/bash.xp/vim.xp/plugins.extern/xptemplate.svn/trunk/src/ftplugin/php/.test/test</title>
    <script language="javascript" type="text/javascript">
      <!-- -->
    </script>
  </head>
  <body>
    
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=encoding_TYPED"/>
    <link rel="stylesheet" type="text/css" href="" />
    <style></style>
    <title>title_TYPED</title>
    <script language="javascript" type="text/javascript">
      <!-- -->
    </script>
  </head>
  <body>
    
  </body>
</html> b

a <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <link rel="stylesheet" type="text/css" href="" />
    <style></style>
    <title>/home/xp/bash.xp/vim.xp/plugins.extern/xptemplate.svn/trunk/src/ftplugin/php/.test/test</title>
    <script language="javascript" type="text/javascript">
      <!-- -->
    </script>
  </head>
  <body>
    
  </body>
</html> b

a <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <link rel="stylesheet" type="text/css" href="" />
    <style></style>
    <title>/home/xp/bash.xp/vim.xp/plugins.extern/xptemplate.svn/trunk/src/ftplugin/php/.test/test</title>
    <script language="javascript" type="text/javascript">
      <!-- -->
    </script>
  </head>
  <body>
    
  </body>
</html>


    /*  -------------if---------------     */
/* if (`condition^)`$IF_BRACKET_STL^{  */
/*     `job^                           */
/* }` `else...^                        */



if (condition) { 
    /* void */;
} else { 
    
}

if (condition_TYPED) { 
    job_TYPED
} else_TYPED b

a if (condition) { 
    /* void */;
} else { 
    
} b

a if (condition) { 
    /* void */;
} else { 
    
}


    /*  -------------if0---------------    */
/* if (`condition^)`$IF_BRACKET_STL^{  */
/*     `job^                           */
/* }` `else...^                        */



if (0 == var) { 
    /* void */;
} else { 
    
}

if (0 == var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (0 == var) { 
    /* void */;
} else { 
    
} b

a if (0 == var) { 
    /* void */;
} else { 
    
}


    /*  -------------if_---------------   */
/* if (`condition^)`$IF_BRACKET_STL^{ */
/*     `wrapped^                      */
/* }                                  */



if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if (condition_TYPED) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

a if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

a if (condition) {
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------ifee---------------  */
/* if (`condition^)`$IF_BRACKET_STL^{ */
/*     `job^                          */
/* }` `else_if...^                    */



if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
}

if (condition_TYPED) {
    job_TYPED
} else_if_TYPED b

a if (condition) {
    /* void */;
} else if (condition ) {
    /* void */;
} else if (condition ) {
    /* void */;
} b

a if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
} else if (condition) {
    /* void */;
}


    /*  -------------ifn---------------    */
/* if (`condition^)`$IF_BRACKET_STL^{  */
/*     `job^                           */
/* }` `else...^                        */



if (null == var) { 
    /* void */;
} else { 
    
}

if (null == var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (null == var) { 
    /* void */;
} else { 
    
} b

a if (null == var) { 
    /* void */;
} else { 
    
}


    /*  -------------ifn0---------------   */
/* if (`condition^)`$IF_BRACKET_STL^{  */
/*     `job^                           */
/* }` `else...^                        */



if (0 != var) { 
    /* void */;
} else { 
    
}

if (0 != var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (0 != var) { 
    /* void */;
} else { 
    
} b

a if (0 != var) { 
    /* void */;
} else { 
    
}


    /*  -------------ifnn---------------   */
/* if (`condition^)`$IF_BRACKET_STL^{  */
/*     `job^                           */
/* }` `else...^                        */



if (null != var) { 
    /* void */;
} else { 
    
}

if (null != var_TYPED) { 
    job_TYPED
} else_TYPED b

a if (null != var) { 
    /* void */;
} else { 
    
} b

a if (null != var) { 
    /* void */;
} else { 
    
}


    /*  -------------interface---------------        */
/* interface `interfaceName^`$FUNC_BRACKET_STL^{ */
/*     `cursor^                                  */
/* }                                             */



interface interfaceName {
    
}

interface interfaceName_TYPED {
    
} b

a interface interfaceName {
    
} b

a interface interfaceName {
    
}


    /*  -------------ol--------------- */
/* <ol>                            */
/*     <li>`val^</li>`...^         */
/*     <li>`val^</li>`...^         */
/* </ol>                           */



<ol>
    <li>val</li>
    <li>val</li>
    <li>val</li>
</ol>

<ol>
    <li>val_TYPED</li>_TYPED
</ol> b

a <ol>
    <li>val</li>
    <li>val</li>
    <li>val</li>
</ol> b

a <ol>
    <li>val</li>
    <li>val</li>
    <li>val</li>
</ol>


    /*  -------------p--------------- */
/* <p` `attr?^>`cursor^</p>       */



<p></p>

<p attr_TYPED></p> b

a <p></p> b

a <p></p>


    /*  -------------p_--------------- */
/* <p>`wrapped^</p>                */



<p>WRAPPED_TEXT
WRAPPED_TEXT_line2</p>

<p>WRAPPED_TEXT
WRAPPED_TEXT_line2</p> b

a <p>WRAPPED_TEXT
WRAPPED_TEXT_line2</p> b

a <p>WRAPPED_TEXT
WRAPPED_TEXT_line2</p>


    /*  -------------script---------------                   */
/* <script language="javascript" type="text/javascript"> */
/* `cursor^                                              */
/* </script>                                             */



<script language="javascript" type="text/javascript">

</script>

<script language="javascript" type="text/javascript">

</script> b

a <script language="javascript" type="text/javascript">

</script> b

a <script language="javascript" type="text/javascript">

</script>


    /*  -------------scrlink---------------                                          */
/* <script language="javascript" type="text/javascript" src="`cursor^"></script> */



<script language="javascript" type="text/javascript" src=""></script>

<script language="javascript" type="text/javascript" src=""></script> b

a <script language="javascript" type="text/javascript" src=""></script> b

a <script language="javascript" type="text/javascript" src=""></script>


    /*  -------------style---------------                      */
/* <?xml-stylesheet type="`style^text/css^" href="`from^"> */



<?xml-stylesheet type="text/css" href="from">

<?xml-stylesheet type="style_TYPED" href="from_TYPED"> b

a <?xml-stylesheet type="text/css" href="from"> b

a <?xml-stylesheet type="text/css" href="from">


    /*  -------------switch--------------- */
/* switch (`var^)`$IF_BRACKET_STL^{    */
/*     case `constant^ :               */
/*         `job^                       */
/*         break;                      */
/* `                                   */
/*     `case...`                       */
/* ^`                                  */
/*     `default...^                    */
/* }                                   */



switch (var) {
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
}

switch (var_TYPED) {
    case constant_TYPED :
        job_TYPED
        break;

    case_TYPED

    default_TYPED
} b

a switch (var) {
    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    case constant :
        /* void */;
        break;

    default:
        
} b

    a switch (var) {
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        case constant :
            /* void */;
            break;
    
        default:
            
    }


    /*  -------------table--------------- */
/* <table>                            */
/*   <tr>                             */
/*     <td>`text^^</td>`...2^         */
/*     <td>`text^^</td>`...2^         */
/*   </tr>`...0^                      */
/*   <tr>                             */
/*     <td>`text^^</td>`...1^         */
/*     <td>`text^^</td>`...1^         */
/*   </tr>`...0^                      */
/* </table>                           */



<table>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>

<table>
  <tr>
    <td>text_TYPED</td>2_TYPED
  </tr>0_TYPED
</table> b

a <table>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table> b

a <table>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>


    /*  -------------ul--------------- */
/* <ul>                            */
/*     <li>`val^</li>`...^         */
/*     <li>`val^</li>`...^         */
/* </ul>                           */



<ul>
    <li>val</li>
    <li>val</li>
    <li>val</li>
</ul>

<ul>
    <li>val_TYPED</li>_TYPED
</ul> b

a <ul>
    <li>val</li>
    <li>val</li>
    <li>val</li>
</ul> b

a <ul>
    <li>val</li>
    <li>val</li>
    <li>val</li>
</ul>


    /*  -------------ver---------------                    */
/* <?xml version="`ver^1.0^" encoding="`enc^utf-8^" ?> */



<?xml version="1.0" encoding="utf-8" ?>

<?xml version="ver_TYPED" encoding="enc_TYPED" ?> b

a <?xml version="1.0" encoding="utf-8" ?> b

a <?xml version="1.0" encoding="utf-8" ?>


    /*  -------------while---------------       */
/* while (`condition^)`$WHILE_BRACKET_STL^{ */
/*     `cursor^                             */
/* }                                        */



while (condition) {
    
}

while (condition_TYPED) {
    
} b

a while (condition) {
    
} b

a while (condition) {
    
}


    /*  -------------while0---------------       */
/* do`$WHILE_BRACKET_STL^{                   */
/*     `cursor^                              */
/* }`$WHILE_BRACKET_STL^while (`condition^); */



do {
    
} while (false);

do {
    
} while (false); b

a do {
    
} while (false); b

a do {
    
} while (false);


    /*  -------------while1---------------      */
/* while (`condition^)`$WHILE_BRACKET_STL^{ */
/*     `cursor^                             */
/* }                                        */



while (true) {
    
}

while (true) {
    
} b

a while (true) {
    
} b

a while (true) {
    
}


    /*  -------------whilenn---------------     */
/* while (`condition^)`$WHILE_BRACKET_STL^{ */
/*     `cursor^                             */
/* }                                        */



while (null != var) {
    
}

while (null != var_TYPED) {
    
} b

a while (null != var) {
    
} b

a while (null != var) {
    
}


    /*  -------------{--------------- */
/* {`wrapped^}                    */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2} b

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

